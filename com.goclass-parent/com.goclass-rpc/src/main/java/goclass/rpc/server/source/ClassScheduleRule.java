/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package goclass.rpc.server.source;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-07")
public class ClassScheduleRule implements org.apache.thrift.TBase<ClassScheduleRule, ClassScheduleRule._Fields>, java.io.Serializable, Cloneable, Comparable<ClassScheduleRule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ClassScheduleRule");

  private static final org.apache.thrift.protocol.TField STAGE_FIVE_RESULT_OF_CLASS_STRATEGY_FIELD_DESC = new org.apache.thrift.protocol.TField("StageFiveResultOfClassStrategy", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SUBJECT_SUBJECTCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectSubjectcount", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ONEDAY_SESSION_FIELD_DESC = new org.apache.thrift.protocol.TField("onedaySession", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TEACHER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teacherList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TEACHINGCLASS_TEACHER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingclassTeacherList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField CLASSROOM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("classroomList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TEACHINGCLASS_CLASSROOM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingclassClassroomList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField POSITIVE_CLASS_SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("positiveClassSchedule", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField NEGATIVE_CLASS_SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("negativeClassSchedule", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField CONNECT_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("connectClass", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField POPULATION_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("populationSize", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField MAX_POPULATION_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPopulationSize", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ClassScheduleRuleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ClassScheduleRuleTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable StageFiveResultOfClassStrategy StageFiveResultOfClassStrategy; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Short> subjectSubjectcount; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> onedaySession; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Short>> teacherList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> teachingclassTeacherList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> classroomList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> teachingclassClassroomList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> positiveClassSchedule; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> negativeClassSchedule; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> connectClass; // required
  public int populationSize; // required
  public int maxPopulationSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STAGE_FIVE_RESULT_OF_CLASS_STRATEGY((short)1, "StageFiveResultOfClassStrategy"),
    SUBJECT_SUBJECTCOUNT((short)2, "subjectSubjectcount"),
    ONEDAY_SESSION((short)3, "onedaySession"),
    TEACHER_LIST((short)4, "teacherList"),
    TEACHINGCLASS_TEACHER_LIST((short)5, "teachingclassTeacherList"),
    CLASSROOM_LIST((short)6, "classroomList"),
    TEACHINGCLASS_CLASSROOM_LIST((short)7, "teachingclassClassroomList"),
    POSITIVE_CLASS_SCHEDULE((short)8, "positiveClassSchedule"),
    NEGATIVE_CLASS_SCHEDULE((short)9, "negativeClassSchedule"),
    CONNECT_CLASS((short)10, "connectClass"),
    POPULATION_SIZE((short)11, "populationSize"),
    MAX_POPULATION_SIZE((short)12, "maxPopulationSize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STAGE_FIVE_RESULT_OF_CLASS_STRATEGY
          return STAGE_FIVE_RESULT_OF_CLASS_STRATEGY;
        case 2: // SUBJECT_SUBJECTCOUNT
          return SUBJECT_SUBJECTCOUNT;
        case 3: // ONEDAY_SESSION
          return ONEDAY_SESSION;
        case 4: // TEACHER_LIST
          return TEACHER_LIST;
        case 5: // TEACHINGCLASS_TEACHER_LIST
          return TEACHINGCLASS_TEACHER_LIST;
        case 6: // CLASSROOM_LIST
          return CLASSROOM_LIST;
        case 7: // TEACHINGCLASS_CLASSROOM_LIST
          return TEACHINGCLASS_CLASSROOM_LIST;
        case 8: // POSITIVE_CLASS_SCHEDULE
          return POSITIVE_CLASS_SCHEDULE;
        case 9: // NEGATIVE_CLASS_SCHEDULE
          return NEGATIVE_CLASS_SCHEDULE;
        case 10: // CONNECT_CLASS
          return CONNECT_CLASS;
        case 11: // POPULATION_SIZE
          return POPULATION_SIZE;
        case 12: // MAX_POPULATION_SIZE
          return MAX_POPULATION_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POPULATIONSIZE_ISSET_ID = 0;
  private static final int __MAXPOPULATIONSIZE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STAGE_FIVE_RESULT_OF_CLASS_STRATEGY, new org.apache.thrift.meta_data.FieldMetaData("StageFiveResultOfClassStrategy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StageFiveResultOfClassStrategy.class)));
    tmpMap.put(_Fields.SUBJECT_SUBJECTCOUNT, new org.apache.thrift.meta_data.FieldMetaData("subjectSubjectcount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.ONEDAY_SESSION, new org.apache.thrift.meta_data.FieldMetaData("onedaySession", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.TEACHER_LIST, new org.apache.thrift.meta_data.FieldMetaData("teacherList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)))));
    tmpMap.put(_Fields.TEACHINGCLASS_TEACHER_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachingclassTeacherList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.CLASSROOM_LIST, new org.apache.thrift.meta_data.FieldMetaData("classroomList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TEACHINGCLASS_CLASSROOM_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachingclassClassroomList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.POSITIVE_CLASS_SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("positiveClassSchedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.NEGATIVE_CLASS_SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("negativeClassSchedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.CONNECT_CLASS, new org.apache.thrift.meta_data.FieldMetaData("connectClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.POPULATION_SIZE, new org.apache.thrift.meta_data.FieldMetaData("populationSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_POPULATION_SIZE, new org.apache.thrift.meta_data.FieldMetaData("maxPopulationSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ClassScheduleRule.class, metaDataMap);
  }

  public ClassScheduleRule() {
    this.populationSize = 50;

    this.maxPopulationSize = 100;

  }

  public ClassScheduleRule(
    StageFiveResultOfClassStrategy StageFiveResultOfClassStrategy,
    java.util.Map<java.lang.Integer,java.lang.Short> subjectSubjectcount,
    java.util.List<java.lang.Short> onedaySession,
    java.util.List<java.util.Map<java.lang.Integer,java.lang.Short>> teacherList,
    java.util.List<java.lang.Integer> teachingclassTeacherList,
    java.util.List<java.lang.Integer> classroomList,
    java.util.List<java.lang.Integer> teachingclassClassroomList,
    java.util.List<java.util.List<java.lang.Integer>> positiveClassSchedule,
    java.util.List<java.util.List<java.lang.Integer>> negativeClassSchedule,
    java.util.List<java.util.List<java.lang.Integer>> connectClass,
    int populationSize,
    int maxPopulationSize)
  {
    this();
    this.StageFiveResultOfClassStrategy = StageFiveResultOfClassStrategy;
    this.subjectSubjectcount = subjectSubjectcount;
    this.onedaySession = onedaySession;
    this.teacherList = teacherList;
    this.teachingclassTeacherList = teachingclassTeacherList;
    this.classroomList = classroomList;
    this.teachingclassClassroomList = teachingclassClassroomList;
    this.positiveClassSchedule = positiveClassSchedule;
    this.negativeClassSchedule = negativeClassSchedule;
    this.connectClass = connectClass;
    this.populationSize = populationSize;
    setPopulationSizeIsSet(true);
    this.maxPopulationSize = maxPopulationSize;
    setMaxPopulationSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ClassScheduleRule(ClassScheduleRule other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStageFiveResultOfClassStrategy()) {
      this.StageFiveResultOfClassStrategy = new StageFiveResultOfClassStrategy(other.StageFiveResultOfClassStrategy);
    }
    if (other.isSetSubjectSubjectcount()) {
      java.util.Map<java.lang.Integer,java.lang.Short> __this__subjectSubjectcount = new java.util.HashMap<java.lang.Integer,java.lang.Short>(other.subjectSubjectcount);
      this.subjectSubjectcount = __this__subjectSubjectcount;
    }
    if (other.isSetOnedaySession()) {
      java.util.List<java.lang.Short> __this__onedaySession = new java.util.ArrayList<java.lang.Short>(other.onedaySession);
      this.onedaySession = __this__onedaySession;
    }
    if (other.isSetTeacherList()) {
      java.util.List<java.util.Map<java.lang.Integer,java.lang.Short>> __this__teacherList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Short>>(other.teacherList.size());
      for (java.util.Map<java.lang.Integer,java.lang.Short> other_element : other.teacherList) {
        java.util.Map<java.lang.Integer,java.lang.Short> __this__teacherList_copy = new java.util.HashMap<java.lang.Integer,java.lang.Short>(other_element);
        __this__teacherList.add(__this__teacherList_copy);
      }
      this.teacherList = __this__teacherList;
    }
    if (other.isSetTeachingclassTeacherList()) {
      java.util.List<java.lang.Integer> __this__teachingclassTeacherList = new java.util.ArrayList<java.lang.Integer>(other.teachingclassTeacherList);
      this.teachingclassTeacherList = __this__teachingclassTeacherList;
    }
    if (other.isSetClassroomList()) {
      java.util.List<java.lang.Integer> __this__classroomList = new java.util.ArrayList<java.lang.Integer>(other.classroomList);
      this.classroomList = __this__classroomList;
    }
    if (other.isSetTeachingclassClassroomList()) {
      java.util.List<java.lang.Integer> __this__teachingclassClassroomList = new java.util.ArrayList<java.lang.Integer>(other.teachingclassClassroomList);
      this.teachingclassClassroomList = __this__teachingclassClassroomList;
    }
    if (other.isSetPositiveClassSchedule()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__positiveClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.positiveClassSchedule.size());
      for (java.util.List<java.lang.Integer> other_element : other.positiveClassSchedule) {
        java.util.List<java.lang.Integer> __this__positiveClassSchedule_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__positiveClassSchedule.add(__this__positiveClassSchedule_copy);
      }
      this.positiveClassSchedule = __this__positiveClassSchedule;
    }
    if (other.isSetNegativeClassSchedule()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__negativeClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.negativeClassSchedule.size());
      for (java.util.List<java.lang.Integer> other_element : other.negativeClassSchedule) {
        java.util.List<java.lang.Integer> __this__negativeClassSchedule_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__negativeClassSchedule.add(__this__negativeClassSchedule_copy);
      }
      this.negativeClassSchedule = __this__negativeClassSchedule;
    }
    if (other.isSetConnectClass()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__connectClass = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.connectClass.size());
      for (java.util.List<java.lang.Integer> other_element : other.connectClass) {
        java.util.List<java.lang.Integer> __this__connectClass_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__connectClass.add(__this__connectClass_copy);
      }
      this.connectClass = __this__connectClass;
    }
    this.populationSize = other.populationSize;
    this.maxPopulationSize = other.maxPopulationSize;
  }

  public ClassScheduleRule deepCopy() {
    return new ClassScheduleRule(this);
  }

  @Override
  public void clear() {
    this.StageFiveResultOfClassStrategy = null;
    this.subjectSubjectcount = null;
    this.onedaySession = null;
    this.teacherList = null;
    this.teachingclassTeacherList = null;
    this.classroomList = null;
    this.teachingclassClassroomList = null;
    this.positiveClassSchedule = null;
    this.negativeClassSchedule = null;
    this.connectClass = null;
    this.populationSize = 50;

    this.maxPopulationSize = 100;

  }

  @org.apache.thrift.annotation.Nullable
  public StageFiveResultOfClassStrategy getStageFiveResultOfClassStrategy() {
    return this.StageFiveResultOfClassStrategy;
  }

  public ClassScheduleRule setStageFiveResultOfClassStrategy(@org.apache.thrift.annotation.Nullable StageFiveResultOfClassStrategy StageFiveResultOfClassStrategy) {
    this.StageFiveResultOfClassStrategy = StageFiveResultOfClassStrategy;
    return this;
  }

  public void unsetStageFiveResultOfClassStrategy() {
    this.StageFiveResultOfClassStrategy = null;
  }

  /** Returns true if field StageFiveResultOfClassStrategy is set (has been assigned a value) and false otherwise */
  public boolean isSetStageFiveResultOfClassStrategy() {
    return this.StageFiveResultOfClassStrategy != null;
  }

  public void setStageFiveResultOfClassStrategyIsSet(boolean value) {
    if (!value) {
      this.StageFiveResultOfClassStrategy = null;
    }
  }

  public int getSubjectSubjectcountSize() {
    return (this.subjectSubjectcount == null) ? 0 : this.subjectSubjectcount.size();
  }

  public void putToSubjectSubjectcount(int key, short val) {
    if (this.subjectSubjectcount == null) {
      this.subjectSubjectcount = new java.util.HashMap<java.lang.Integer,java.lang.Short>();
    }
    this.subjectSubjectcount.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.lang.Short> getSubjectSubjectcount() {
    return this.subjectSubjectcount;
  }

  public ClassScheduleRule setSubjectSubjectcount(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Short> subjectSubjectcount) {
    this.subjectSubjectcount = subjectSubjectcount;
    return this;
  }

  public void unsetSubjectSubjectcount() {
    this.subjectSubjectcount = null;
  }

  /** Returns true if field subjectSubjectcount is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectSubjectcount() {
    return this.subjectSubjectcount != null;
  }

  public void setSubjectSubjectcountIsSet(boolean value) {
    if (!value) {
      this.subjectSubjectcount = null;
    }
  }

  public int getOnedaySessionSize() {
    return (this.onedaySession == null) ? 0 : this.onedaySession.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Short> getOnedaySessionIterator() {
    return (this.onedaySession == null) ? null : this.onedaySession.iterator();
  }

  public void addToOnedaySession(short elem) {
    if (this.onedaySession == null) {
      this.onedaySession = new java.util.ArrayList<java.lang.Short>();
    }
    this.onedaySession.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Short> getOnedaySession() {
    return this.onedaySession;
  }

  public ClassScheduleRule setOnedaySession(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Short> onedaySession) {
    this.onedaySession = onedaySession;
    return this;
  }

  public void unsetOnedaySession() {
    this.onedaySession = null;
  }

  /** Returns true if field onedaySession is set (has been assigned a value) and false otherwise */
  public boolean isSetOnedaySession() {
    return this.onedaySession != null;
  }

  public void setOnedaySessionIsSet(boolean value) {
    if (!value) {
      this.onedaySession = null;
    }
  }

  public int getTeacherListSize() {
    return (this.teacherList == null) ? 0 : this.teacherList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.Integer,java.lang.Short>> getTeacherListIterator() {
    return (this.teacherList == null) ? null : this.teacherList.iterator();
  }

  public void addToTeacherList(java.util.Map<java.lang.Integer,java.lang.Short> elem) {
    if (this.teacherList == null) {
      this.teacherList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Short>>();
    }
    this.teacherList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.Integer,java.lang.Short>> getTeacherList() {
    return this.teacherList;
  }

  public ClassScheduleRule setTeacherList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Short>> teacherList) {
    this.teacherList = teacherList;
    return this;
  }

  public void unsetTeacherList() {
    this.teacherList = null;
  }

  /** Returns true if field teacherList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeacherList() {
    return this.teacherList != null;
  }

  public void setTeacherListIsSet(boolean value) {
    if (!value) {
      this.teacherList = null;
    }
  }

  public int getTeachingclassTeacherListSize() {
    return (this.teachingclassTeacherList == null) ? 0 : this.teachingclassTeacherList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTeachingclassTeacherListIterator() {
    return (this.teachingclassTeacherList == null) ? null : this.teachingclassTeacherList.iterator();
  }

  public void addToTeachingclassTeacherList(int elem) {
    if (this.teachingclassTeacherList == null) {
      this.teachingclassTeacherList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.teachingclassTeacherList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getTeachingclassTeacherList() {
    return this.teachingclassTeacherList;
  }

  public ClassScheduleRule setTeachingclassTeacherList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> teachingclassTeacherList) {
    this.teachingclassTeacherList = teachingclassTeacherList;
    return this;
  }

  public void unsetTeachingclassTeacherList() {
    this.teachingclassTeacherList = null;
  }

  /** Returns true if field teachingclassTeacherList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingclassTeacherList() {
    return this.teachingclassTeacherList != null;
  }

  public void setTeachingclassTeacherListIsSet(boolean value) {
    if (!value) {
      this.teachingclassTeacherList = null;
    }
  }

  public int getClassroomListSize() {
    return (this.classroomList == null) ? 0 : this.classroomList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getClassroomListIterator() {
    return (this.classroomList == null) ? null : this.classroomList.iterator();
  }

  public void addToClassroomList(int elem) {
    if (this.classroomList == null) {
      this.classroomList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.classroomList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getClassroomList() {
    return this.classroomList;
  }

  public ClassScheduleRule setClassroomList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> classroomList) {
    this.classroomList = classroomList;
    return this;
  }

  public void unsetClassroomList() {
    this.classroomList = null;
  }

  /** Returns true if field classroomList is set (has been assigned a value) and false otherwise */
  public boolean isSetClassroomList() {
    return this.classroomList != null;
  }

  public void setClassroomListIsSet(boolean value) {
    if (!value) {
      this.classroomList = null;
    }
  }

  public int getTeachingclassClassroomListSize() {
    return (this.teachingclassClassroomList == null) ? 0 : this.teachingclassClassroomList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getTeachingclassClassroomListIterator() {
    return (this.teachingclassClassroomList == null) ? null : this.teachingclassClassroomList.iterator();
  }

  public void addToTeachingclassClassroomList(int elem) {
    if (this.teachingclassClassroomList == null) {
      this.teachingclassClassroomList = new java.util.ArrayList<java.lang.Integer>();
    }
    this.teachingclassClassroomList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getTeachingclassClassroomList() {
    return this.teachingclassClassroomList;
  }

  public ClassScheduleRule setTeachingclassClassroomList(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> teachingclassClassroomList) {
    this.teachingclassClassroomList = teachingclassClassroomList;
    return this;
  }

  public void unsetTeachingclassClassroomList() {
    this.teachingclassClassroomList = null;
  }

  /** Returns true if field teachingclassClassroomList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingclassClassroomList() {
    return this.teachingclassClassroomList != null;
  }

  public void setTeachingclassClassroomListIsSet(boolean value) {
    if (!value) {
      this.teachingclassClassroomList = null;
    }
  }

  public int getPositiveClassScheduleSize() {
    return (this.positiveClassSchedule == null) ? 0 : this.positiveClassSchedule.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getPositiveClassScheduleIterator() {
    return (this.positiveClassSchedule == null) ? null : this.positiveClassSchedule.iterator();
  }

  public void addToPositiveClassSchedule(java.util.List<java.lang.Integer> elem) {
    if (this.positiveClassSchedule == null) {
      this.positiveClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.positiveClassSchedule.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getPositiveClassSchedule() {
    return this.positiveClassSchedule;
  }

  public ClassScheduleRule setPositiveClassSchedule(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> positiveClassSchedule) {
    this.positiveClassSchedule = positiveClassSchedule;
    return this;
  }

  public void unsetPositiveClassSchedule() {
    this.positiveClassSchedule = null;
  }

  /** Returns true if field positiveClassSchedule is set (has been assigned a value) and false otherwise */
  public boolean isSetPositiveClassSchedule() {
    return this.positiveClassSchedule != null;
  }

  public void setPositiveClassScheduleIsSet(boolean value) {
    if (!value) {
      this.positiveClassSchedule = null;
    }
  }

  public int getNegativeClassScheduleSize() {
    return (this.negativeClassSchedule == null) ? 0 : this.negativeClassSchedule.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getNegativeClassScheduleIterator() {
    return (this.negativeClassSchedule == null) ? null : this.negativeClassSchedule.iterator();
  }

  public void addToNegativeClassSchedule(java.util.List<java.lang.Integer> elem) {
    if (this.negativeClassSchedule == null) {
      this.negativeClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.negativeClassSchedule.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getNegativeClassSchedule() {
    return this.negativeClassSchedule;
  }

  public ClassScheduleRule setNegativeClassSchedule(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> negativeClassSchedule) {
    this.negativeClassSchedule = negativeClassSchedule;
    return this;
  }

  public void unsetNegativeClassSchedule() {
    this.negativeClassSchedule = null;
  }

  /** Returns true if field negativeClassSchedule is set (has been assigned a value) and false otherwise */
  public boolean isSetNegativeClassSchedule() {
    return this.negativeClassSchedule != null;
  }

  public void setNegativeClassScheduleIsSet(boolean value) {
    if (!value) {
      this.negativeClassSchedule = null;
    }
  }

  public int getConnectClassSize() {
    return (this.connectClass == null) ? 0 : this.connectClass.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getConnectClassIterator() {
    return (this.connectClass == null) ? null : this.connectClass.iterator();
  }

  public void addToConnectClass(java.util.List<java.lang.Integer> elem) {
    if (this.connectClass == null) {
      this.connectClass = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.connectClass.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getConnectClass() {
    return this.connectClass;
  }

  public ClassScheduleRule setConnectClass(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> connectClass) {
    this.connectClass = connectClass;
    return this;
  }

  public void unsetConnectClass() {
    this.connectClass = null;
  }

  /** Returns true if field connectClass is set (has been assigned a value) and false otherwise */
  public boolean isSetConnectClass() {
    return this.connectClass != null;
  }

  public void setConnectClassIsSet(boolean value) {
    if (!value) {
      this.connectClass = null;
    }
  }

  public int getPopulationSize() {
    return this.populationSize;
  }

  public ClassScheduleRule setPopulationSize(int populationSize) {
    this.populationSize = populationSize;
    setPopulationSizeIsSet(true);
    return this;
  }

  public void unsetPopulationSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __POPULATIONSIZE_ISSET_ID);
  }

  /** Returns true if field populationSize is set (has been assigned a value) and false otherwise */
  public boolean isSetPopulationSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __POPULATIONSIZE_ISSET_ID);
  }

  public void setPopulationSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __POPULATIONSIZE_ISSET_ID, value);
  }

  public int getMaxPopulationSize() {
    return this.maxPopulationSize;
  }

  public ClassScheduleRule setMaxPopulationSize(int maxPopulationSize) {
    this.maxPopulationSize = maxPopulationSize;
    setMaxPopulationSizeIsSet(true);
    return this;
  }

  public void unsetMaxPopulationSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXPOPULATIONSIZE_ISSET_ID);
  }

  /** Returns true if field maxPopulationSize is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPopulationSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXPOPULATIONSIZE_ISSET_ID);
  }

  public void setMaxPopulationSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXPOPULATIONSIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STAGE_FIVE_RESULT_OF_CLASS_STRATEGY:
      if (value == null) {
        unsetStageFiveResultOfClassStrategy();
      } else {
        setStageFiveResultOfClassStrategy((StageFiveResultOfClassStrategy)value);
      }
      break;

    case SUBJECT_SUBJECTCOUNT:
      if (value == null) {
        unsetSubjectSubjectcount();
      } else {
        setSubjectSubjectcount((java.util.Map<java.lang.Integer,java.lang.Short>)value);
      }
      break;

    case ONEDAY_SESSION:
      if (value == null) {
        unsetOnedaySession();
      } else {
        setOnedaySession((java.util.List<java.lang.Short>)value);
      }
      break;

    case TEACHER_LIST:
      if (value == null) {
        unsetTeacherList();
      } else {
        setTeacherList((java.util.List<java.util.Map<java.lang.Integer,java.lang.Short>>)value);
      }
      break;

    case TEACHINGCLASS_TEACHER_LIST:
      if (value == null) {
        unsetTeachingclassTeacherList();
      } else {
        setTeachingclassTeacherList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case CLASSROOM_LIST:
      if (value == null) {
        unsetClassroomList();
      } else {
        setClassroomList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case TEACHINGCLASS_CLASSROOM_LIST:
      if (value == null) {
        unsetTeachingclassClassroomList();
      } else {
        setTeachingclassClassroomList((java.util.List<java.lang.Integer>)value);
      }
      break;

    case POSITIVE_CLASS_SCHEDULE:
      if (value == null) {
        unsetPositiveClassSchedule();
      } else {
        setPositiveClassSchedule((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case NEGATIVE_CLASS_SCHEDULE:
      if (value == null) {
        unsetNegativeClassSchedule();
      } else {
        setNegativeClassSchedule((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case CONNECT_CLASS:
      if (value == null) {
        unsetConnectClass();
      } else {
        setConnectClass((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case POPULATION_SIZE:
      if (value == null) {
        unsetPopulationSize();
      } else {
        setPopulationSize((java.lang.Integer)value);
      }
      break;

    case MAX_POPULATION_SIZE:
      if (value == null) {
        unsetMaxPopulationSize();
      } else {
        setMaxPopulationSize((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STAGE_FIVE_RESULT_OF_CLASS_STRATEGY:
      return getStageFiveResultOfClassStrategy();

    case SUBJECT_SUBJECTCOUNT:
      return getSubjectSubjectcount();

    case ONEDAY_SESSION:
      return getOnedaySession();

    case TEACHER_LIST:
      return getTeacherList();

    case TEACHINGCLASS_TEACHER_LIST:
      return getTeachingclassTeacherList();

    case CLASSROOM_LIST:
      return getClassroomList();

    case TEACHINGCLASS_CLASSROOM_LIST:
      return getTeachingclassClassroomList();

    case POSITIVE_CLASS_SCHEDULE:
      return getPositiveClassSchedule();

    case NEGATIVE_CLASS_SCHEDULE:
      return getNegativeClassSchedule();

    case CONNECT_CLASS:
      return getConnectClass();

    case POPULATION_SIZE:
      return getPopulationSize();

    case MAX_POPULATION_SIZE:
      return getMaxPopulationSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STAGE_FIVE_RESULT_OF_CLASS_STRATEGY:
      return isSetStageFiveResultOfClassStrategy();
    case SUBJECT_SUBJECTCOUNT:
      return isSetSubjectSubjectcount();
    case ONEDAY_SESSION:
      return isSetOnedaySession();
    case TEACHER_LIST:
      return isSetTeacherList();
    case TEACHINGCLASS_TEACHER_LIST:
      return isSetTeachingclassTeacherList();
    case CLASSROOM_LIST:
      return isSetClassroomList();
    case TEACHINGCLASS_CLASSROOM_LIST:
      return isSetTeachingclassClassroomList();
    case POSITIVE_CLASS_SCHEDULE:
      return isSetPositiveClassSchedule();
    case NEGATIVE_CLASS_SCHEDULE:
      return isSetNegativeClassSchedule();
    case CONNECT_CLASS:
      return isSetConnectClass();
    case POPULATION_SIZE:
      return isSetPopulationSize();
    case MAX_POPULATION_SIZE:
      return isSetMaxPopulationSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ClassScheduleRule)
      return this.equals((ClassScheduleRule)that);
    return false;
  }

  public boolean equals(ClassScheduleRule that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_StageFiveResultOfClassStrategy = true && this.isSetStageFiveResultOfClassStrategy();
    boolean that_present_StageFiveResultOfClassStrategy = true && that.isSetStageFiveResultOfClassStrategy();
    if (this_present_StageFiveResultOfClassStrategy || that_present_StageFiveResultOfClassStrategy) {
      if (!(this_present_StageFiveResultOfClassStrategy && that_present_StageFiveResultOfClassStrategy))
        return false;
      if (!this.StageFiveResultOfClassStrategy.equals(that.StageFiveResultOfClassStrategy))
        return false;
    }

    boolean this_present_subjectSubjectcount = true && this.isSetSubjectSubjectcount();
    boolean that_present_subjectSubjectcount = true && that.isSetSubjectSubjectcount();
    if (this_present_subjectSubjectcount || that_present_subjectSubjectcount) {
      if (!(this_present_subjectSubjectcount && that_present_subjectSubjectcount))
        return false;
      if (!this.subjectSubjectcount.equals(that.subjectSubjectcount))
        return false;
    }

    boolean this_present_onedaySession = true && this.isSetOnedaySession();
    boolean that_present_onedaySession = true && that.isSetOnedaySession();
    if (this_present_onedaySession || that_present_onedaySession) {
      if (!(this_present_onedaySession && that_present_onedaySession))
        return false;
      if (!this.onedaySession.equals(that.onedaySession))
        return false;
    }

    boolean this_present_teacherList = true && this.isSetTeacherList();
    boolean that_present_teacherList = true && that.isSetTeacherList();
    if (this_present_teacherList || that_present_teacherList) {
      if (!(this_present_teacherList && that_present_teacherList))
        return false;
      if (!this.teacherList.equals(that.teacherList))
        return false;
    }

    boolean this_present_teachingclassTeacherList = true && this.isSetTeachingclassTeacherList();
    boolean that_present_teachingclassTeacherList = true && that.isSetTeachingclassTeacherList();
    if (this_present_teachingclassTeacherList || that_present_teachingclassTeacherList) {
      if (!(this_present_teachingclassTeacherList && that_present_teachingclassTeacherList))
        return false;
      if (!this.teachingclassTeacherList.equals(that.teachingclassTeacherList))
        return false;
    }

    boolean this_present_classroomList = true && this.isSetClassroomList();
    boolean that_present_classroomList = true && that.isSetClassroomList();
    if (this_present_classroomList || that_present_classroomList) {
      if (!(this_present_classroomList && that_present_classroomList))
        return false;
      if (!this.classroomList.equals(that.classroomList))
        return false;
    }

    boolean this_present_teachingclassClassroomList = true && this.isSetTeachingclassClassroomList();
    boolean that_present_teachingclassClassroomList = true && that.isSetTeachingclassClassroomList();
    if (this_present_teachingclassClassroomList || that_present_teachingclassClassroomList) {
      if (!(this_present_teachingclassClassroomList && that_present_teachingclassClassroomList))
        return false;
      if (!this.teachingclassClassroomList.equals(that.teachingclassClassroomList))
        return false;
    }

    boolean this_present_positiveClassSchedule = true && this.isSetPositiveClassSchedule();
    boolean that_present_positiveClassSchedule = true && that.isSetPositiveClassSchedule();
    if (this_present_positiveClassSchedule || that_present_positiveClassSchedule) {
      if (!(this_present_positiveClassSchedule && that_present_positiveClassSchedule))
        return false;
      if (!this.positiveClassSchedule.equals(that.positiveClassSchedule))
        return false;
    }

    boolean this_present_negativeClassSchedule = true && this.isSetNegativeClassSchedule();
    boolean that_present_negativeClassSchedule = true && that.isSetNegativeClassSchedule();
    if (this_present_negativeClassSchedule || that_present_negativeClassSchedule) {
      if (!(this_present_negativeClassSchedule && that_present_negativeClassSchedule))
        return false;
      if (!this.negativeClassSchedule.equals(that.negativeClassSchedule))
        return false;
    }

    boolean this_present_connectClass = true && this.isSetConnectClass();
    boolean that_present_connectClass = true && that.isSetConnectClass();
    if (this_present_connectClass || that_present_connectClass) {
      if (!(this_present_connectClass && that_present_connectClass))
        return false;
      if (!this.connectClass.equals(that.connectClass))
        return false;
    }

    boolean this_present_populationSize = true;
    boolean that_present_populationSize = true;
    if (this_present_populationSize || that_present_populationSize) {
      if (!(this_present_populationSize && that_present_populationSize))
        return false;
      if (this.populationSize != that.populationSize)
        return false;
    }

    boolean this_present_maxPopulationSize = true;
    boolean that_present_maxPopulationSize = true;
    if (this_present_maxPopulationSize || that_present_maxPopulationSize) {
      if (!(this_present_maxPopulationSize && that_present_maxPopulationSize))
        return false;
      if (this.maxPopulationSize != that.maxPopulationSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStageFiveResultOfClassStrategy()) ? 131071 : 524287);
    if (isSetStageFiveResultOfClassStrategy())
      hashCode = hashCode * 8191 + StageFiveResultOfClassStrategy.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubjectSubjectcount()) ? 131071 : 524287);
    if (isSetSubjectSubjectcount())
      hashCode = hashCode * 8191 + subjectSubjectcount.hashCode();

    hashCode = hashCode * 8191 + ((isSetOnedaySession()) ? 131071 : 524287);
    if (isSetOnedaySession())
      hashCode = hashCode * 8191 + onedaySession.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeacherList()) ? 131071 : 524287);
    if (isSetTeacherList())
      hashCode = hashCode * 8191 + teacherList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeachingclassTeacherList()) ? 131071 : 524287);
    if (isSetTeachingclassTeacherList())
      hashCode = hashCode * 8191 + teachingclassTeacherList.hashCode();

    hashCode = hashCode * 8191 + ((isSetClassroomList()) ? 131071 : 524287);
    if (isSetClassroomList())
      hashCode = hashCode * 8191 + classroomList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeachingclassClassroomList()) ? 131071 : 524287);
    if (isSetTeachingclassClassroomList())
      hashCode = hashCode * 8191 + teachingclassClassroomList.hashCode();

    hashCode = hashCode * 8191 + ((isSetPositiveClassSchedule()) ? 131071 : 524287);
    if (isSetPositiveClassSchedule())
      hashCode = hashCode * 8191 + positiveClassSchedule.hashCode();

    hashCode = hashCode * 8191 + ((isSetNegativeClassSchedule()) ? 131071 : 524287);
    if (isSetNegativeClassSchedule())
      hashCode = hashCode * 8191 + negativeClassSchedule.hashCode();

    hashCode = hashCode * 8191 + ((isSetConnectClass()) ? 131071 : 524287);
    if (isSetConnectClass())
      hashCode = hashCode * 8191 + connectClass.hashCode();

    hashCode = hashCode * 8191 + populationSize;

    hashCode = hashCode * 8191 + maxPopulationSize;

    return hashCode;
  }

  @Override
  public int compareTo(ClassScheduleRule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStageFiveResultOfClassStrategy()).compareTo(other.isSetStageFiveResultOfClassStrategy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStageFiveResultOfClassStrategy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.StageFiveResultOfClassStrategy, other.StageFiveResultOfClassStrategy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubjectSubjectcount()).compareTo(other.isSetSubjectSubjectcount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectSubjectcount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectSubjectcount, other.subjectSubjectcount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOnedaySession()).compareTo(other.isSetOnedaySession());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnedaySession()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.onedaySession, other.onedaySession);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeacherList()).compareTo(other.isSetTeacherList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeacherList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teacherList, other.teacherList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeachingclassTeacherList()).compareTo(other.isSetTeachingclassTeacherList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingclassTeacherList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingclassTeacherList, other.teachingclassTeacherList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClassroomList()).compareTo(other.isSetClassroomList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassroomList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classroomList, other.classroomList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeachingclassClassroomList()).compareTo(other.isSetTeachingclassClassroomList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingclassClassroomList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingclassClassroomList, other.teachingclassClassroomList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositiveClassSchedule()).compareTo(other.isSetPositiveClassSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositiveClassSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positiveClassSchedule, other.positiveClassSchedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNegativeClassSchedule()).compareTo(other.isSetNegativeClassSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNegativeClassSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.negativeClassSchedule, other.negativeClassSchedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetConnectClass()).compareTo(other.isSetConnectClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConnectClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connectClass, other.connectClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPopulationSize()).compareTo(other.isSetPopulationSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPopulationSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.populationSize, other.populationSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMaxPopulationSize()).compareTo(other.isSetMaxPopulationSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPopulationSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPopulationSize, other.maxPopulationSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ClassScheduleRule(");
    boolean first = true;

    sb.append("StageFiveResultOfClassStrategy:");
    if (this.StageFiveResultOfClassStrategy == null) {
      sb.append("null");
    } else {
      sb.append(this.StageFiveResultOfClassStrategy);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectSubjectcount:");
    if (this.subjectSubjectcount == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectSubjectcount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onedaySession:");
    if (this.onedaySession == null) {
      sb.append("null");
    } else {
      sb.append(this.onedaySession);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teacherList:");
    if (this.teacherList == null) {
      sb.append("null");
    } else {
      sb.append(this.teacherList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingclassTeacherList:");
    if (this.teachingclassTeacherList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingclassTeacherList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classroomList:");
    if (this.classroomList == null) {
      sb.append("null");
    } else {
      sb.append(this.classroomList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingclassClassroomList:");
    if (this.teachingclassClassroomList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingclassClassroomList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("positiveClassSchedule:");
    if (this.positiveClassSchedule == null) {
      sb.append("null");
    } else {
      sb.append(this.positiveClassSchedule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("negativeClassSchedule:");
    if (this.negativeClassSchedule == null) {
      sb.append("null");
    } else {
      sb.append(this.negativeClassSchedule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("connectClass:");
    if (this.connectClass == null) {
      sb.append("null");
    } else {
      sb.append(this.connectClass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("populationSize:");
    sb.append(this.populationSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxPopulationSize:");
    sb.append(this.maxPopulationSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (StageFiveResultOfClassStrategy != null) {
      StageFiveResultOfClassStrategy.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ClassScheduleRuleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClassScheduleRuleStandardScheme getScheme() {
      return new ClassScheduleRuleStandardScheme();
    }
  }

  private static class ClassScheduleRuleStandardScheme extends org.apache.thrift.scheme.StandardScheme<ClassScheduleRule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ClassScheduleRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STAGE_FIVE_RESULT_OF_CLASS_STRATEGY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.StageFiveResultOfClassStrategy = new StageFiveResultOfClassStrategy();
              struct.StageFiveResultOfClassStrategy.read(iprot);
              struct.setStageFiveResultOfClassStrategyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBJECT_SUBJECTCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map652 = iprot.readMapBegin();
                struct.subjectSubjectcount = new java.util.HashMap<java.lang.Integer,java.lang.Short>(2*_map652.size);
                int _key653;
                short _val654;
                for (int _i655 = 0; _i655 < _map652.size; ++_i655)
                {
                  _key653 = iprot.readI32();
                  _val654 = iprot.readI16();
                  struct.subjectSubjectcount.put(_key653, _val654);
                }
                iprot.readMapEnd();
              }
              struct.setSubjectSubjectcountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ONEDAY_SESSION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list656 = iprot.readListBegin();
                struct.onedaySession = new java.util.ArrayList<java.lang.Short>(_list656.size);
                short _elem657;
                for (int _i658 = 0; _i658 < _list656.size; ++_i658)
                {
                  _elem657 = iprot.readI16();
                  struct.onedaySession.add(_elem657);
                }
                iprot.readListEnd();
              }
              struct.setOnedaySessionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TEACHER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list659 = iprot.readListBegin();
                struct.teacherList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Short>>(_list659.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Short> _elem660;
                for (int _i661 = 0; _i661 < _list659.size; ++_i661)
                {
                  {
                    org.apache.thrift.protocol.TMap _map662 = iprot.readMapBegin();
                    _elem660 = new java.util.HashMap<java.lang.Integer,java.lang.Short>(2*_map662.size);
                    int _key663;
                    short _val664;
                    for (int _i665 = 0; _i665 < _map662.size; ++_i665)
                    {
                      _key663 = iprot.readI32();
                      _val664 = iprot.readI16();
                      _elem660.put(_key663, _val664);
                    }
                    iprot.readMapEnd();
                  }
                  struct.teacherList.add(_elem660);
                }
                iprot.readListEnd();
              }
              struct.setTeacherListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEACHINGCLASS_TEACHER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list666 = iprot.readListBegin();
                struct.teachingclassTeacherList = new java.util.ArrayList<java.lang.Integer>(_list666.size);
                int _elem667;
                for (int _i668 = 0; _i668 < _list666.size; ++_i668)
                {
                  _elem667 = iprot.readI32();
                  struct.teachingclassTeacherList.add(_elem667);
                }
                iprot.readListEnd();
              }
              struct.setTeachingclassTeacherListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLASSROOM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list669 = iprot.readListBegin();
                struct.classroomList = new java.util.ArrayList<java.lang.Integer>(_list669.size);
                int _elem670;
                for (int _i671 = 0; _i671 < _list669.size; ++_i671)
                {
                  _elem670 = iprot.readI32();
                  struct.classroomList.add(_elem670);
                }
                iprot.readListEnd();
              }
              struct.setClassroomListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TEACHINGCLASS_CLASSROOM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list672 = iprot.readListBegin();
                struct.teachingclassClassroomList = new java.util.ArrayList<java.lang.Integer>(_list672.size);
                int _elem673;
                for (int _i674 = 0; _i674 < _list672.size; ++_i674)
                {
                  _elem673 = iprot.readI32();
                  struct.teachingclassClassroomList.add(_elem673);
                }
                iprot.readListEnd();
              }
              struct.setTeachingclassClassroomListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // POSITIVE_CLASS_SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list675 = iprot.readListBegin();
                struct.positiveClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list675.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem676;
                for (int _i677 = 0; _i677 < _list675.size; ++_i677)
                {
                  {
                    org.apache.thrift.protocol.TList _list678 = iprot.readListBegin();
                    _elem676 = new java.util.ArrayList<java.lang.Integer>(_list678.size);
                    int _elem679;
                    for (int _i680 = 0; _i680 < _list678.size; ++_i680)
                    {
                      _elem679 = iprot.readI32();
                      _elem676.add(_elem679);
                    }
                    iprot.readListEnd();
                  }
                  struct.positiveClassSchedule.add(_elem676);
                }
                iprot.readListEnd();
              }
              struct.setPositiveClassScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NEGATIVE_CLASS_SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list681 = iprot.readListBegin();
                struct.negativeClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list681.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem682;
                for (int _i683 = 0; _i683 < _list681.size; ++_i683)
                {
                  {
                    org.apache.thrift.protocol.TList _list684 = iprot.readListBegin();
                    _elem682 = new java.util.ArrayList<java.lang.Integer>(_list684.size);
                    int _elem685;
                    for (int _i686 = 0; _i686 < _list684.size; ++_i686)
                    {
                      _elem685 = iprot.readI32();
                      _elem682.add(_elem685);
                    }
                    iprot.readListEnd();
                  }
                  struct.negativeClassSchedule.add(_elem682);
                }
                iprot.readListEnd();
              }
              struct.setNegativeClassScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CONNECT_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list687 = iprot.readListBegin();
                struct.connectClass = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list687.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem688;
                for (int _i689 = 0; _i689 < _list687.size; ++_i689)
                {
                  {
                    org.apache.thrift.protocol.TList _list690 = iprot.readListBegin();
                    _elem688 = new java.util.ArrayList<java.lang.Integer>(_list690.size);
                    int _elem691;
                    for (int _i692 = 0; _i692 < _list690.size; ++_i692)
                    {
                      _elem691 = iprot.readI32();
                      _elem688.add(_elem691);
                    }
                    iprot.readListEnd();
                  }
                  struct.connectClass.add(_elem688);
                }
                iprot.readListEnd();
              }
              struct.setConnectClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POPULATION_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.populationSize = iprot.readI32();
              struct.setPopulationSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAX_POPULATION_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxPopulationSize = iprot.readI32();
              struct.setMaxPopulationSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ClassScheduleRule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.StageFiveResultOfClassStrategy != null) {
        oprot.writeFieldBegin(STAGE_FIVE_RESULT_OF_CLASS_STRATEGY_FIELD_DESC);
        struct.StageFiveResultOfClassStrategy.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.subjectSubjectcount != null) {
        oprot.writeFieldBegin(SUBJECT_SUBJECTCOUNT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I16, struct.subjectSubjectcount.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Short> _iter693 : struct.subjectSubjectcount.entrySet())
          {
            oprot.writeI32(_iter693.getKey());
            oprot.writeI16(_iter693.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.onedaySession != null) {
        oprot.writeFieldBegin(ONEDAY_SESSION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.onedaySession.size()));
          for (short _iter694 : struct.onedaySession)
          {
            oprot.writeI16(_iter694);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teacherList != null) {
        oprot.writeFieldBegin(TEACHER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.teacherList.size()));
          for (java.util.Map<java.lang.Integer,java.lang.Short> _iter695 : struct.teacherList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I16, _iter695.size()));
              for (java.util.Map.Entry<java.lang.Integer, java.lang.Short> _iter696 : _iter695.entrySet())
              {
                oprot.writeI32(_iter696.getKey());
                oprot.writeI16(_iter696.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachingclassTeacherList != null) {
        oprot.writeFieldBegin(TEACHINGCLASS_TEACHER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.teachingclassTeacherList.size()));
          for (int _iter697 : struct.teachingclassTeacherList)
          {
            oprot.writeI32(_iter697);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.classroomList != null) {
        oprot.writeFieldBegin(CLASSROOM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.classroomList.size()));
          for (int _iter698 : struct.classroomList)
          {
            oprot.writeI32(_iter698);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachingclassClassroomList != null) {
        oprot.writeFieldBegin(TEACHINGCLASS_CLASSROOM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.teachingclassClassroomList.size()));
          for (int _iter699 : struct.teachingclassClassroomList)
          {
            oprot.writeI32(_iter699);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.positiveClassSchedule != null) {
        oprot.writeFieldBegin(POSITIVE_CLASS_SCHEDULE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.positiveClassSchedule.size()));
          for (java.util.List<java.lang.Integer> _iter700 : struct.positiveClassSchedule)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter700.size()));
              for (int _iter701 : _iter700)
              {
                oprot.writeI32(_iter701);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.negativeClassSchedule != null) {
        oprot.writeFieldBegin(NEGATIVE_CLASS_SCHEDULE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.negativeClassSchedule.size()));
          for (java.util.List<java.lang.Integer> _iter702 : struct.negativeClassSchedule)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter702.size()));
              for (int _iter703 : _iter702)
              {
                oprot.writeI32(_iter703);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.connectClass != null) {
        oprot.writeFieldBegin(CONNECT_CLASS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.connectClass.size()));
          for (java.util.List<java.lang.Integer> _iter704 : struct.connectClass)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter704.size()));
              for (int _iter705 : _iter704)
              {
                oprot.writeI32(_iter705);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POPULATION_SIZE_FIELD_DESC);
      oprot.writeI32(struct.populationSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_POPULATION_SIZE_FIELD_DESC);
      oprot.writeI32(struct.maxPopulationSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ClassScheduleRuleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ClassScheduleRuleTupleScheme getScheme() {
      return new ClassScheduleRuleTupleScheme();
    }
  }

  private static class ClassScheduleRuleTupleScheme extends org.apache.thrift.scheme.TupleScheme<ClassScheduleRule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ClassScheduleRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStageFiveResultOfClassStrategy()) {
        optionals.set(0);
      }
      if (struct.isSetSubjectSubjectcount()) {
        optionals.set(1);
      }
      if (struct.isSetOnedaySession()) {
        optionals.set(2);
      }
      if (struct.isSetTeacherList()) {
        optionals.set(3);
      }
      if (struct.isSetTeachingclassTeacherList()) {
        optionals.set(4);
      }
      if (struct.isSetClassroomList()) {
        optionals.set(5);
      }
      if (struct.isSetTeachingclassClassroomList()) {
        optionals.set(6);
      }
      if (struct.isSetPositiveClassSchedule()) {
        optionals.set(7);
      }
      if (struct.isSetNegativeClassSchedule()) {
        optionals.set(8);
      }
      if (struct.isSetConnectClass()) {
        optionals.set(9);
      }
      if (struct.isSetPopulationSize()) {
        optionals.set(10);
      }
      if (struct.isSetMaxPopulationSize()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetStageFiveResultOfClassStrategy()) {
        struct.StageFiveResultOfClassStrategy.write(oprot);
      }
      if (struct.isSetSubjectSubjectcount()) {
        {
          oprot.writeI32(struct.subjectSubjectcount.size());
          for (java.util.Map.Entry<java.lang.Integer, java.lang.Short> _iter706 : struct.subjectSubjectcount.entrySet())
          {
            oprot.writeI32(_iter706.getKey());
            oprot.writeI16(_iter706.getValue());
          }
        }
      }
      if (struct.isSetOnedaySession()) {
        {
          oprot.writeI32(struct.onedaySession.size());
          for (short _iter707 : struct.onedaySession)
          {
            oprot.writeI16(_iter707);
          }
        }
      }
      if (struct.isSetTeacherList()) {
        {
          oprot.writeI32(struct.teacherList.size());
          for (java.util.Map<java.lang.Integer,java.lang.Short> _iter708 : struct.teacherList)
          {
            {
              oprot.writeI32(_iter708.size());
              for (java.util.Map.Entry<java.lang.Integer, java.lang.Short> _iter709 : _iter708.entrySet())
              {
                oprot.writeI32(_iter709.getKey());
                oprot.writeI16(_iter709.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetTeachingclassTeacherList()) {
        {
          oprot.writeI32(struct.teachingclassTeacherList.size());
          for (int _iter710 : struct.teachingclassTeacherList)
          {
            oprot.writeI32(_iter710);
          }
        }
      }
      if (struct.isSetClassroomList()) {
        {
          oprot.writeI32(struct.classroomList.size());
          for (int _iter711 : struct.classroomList)
          {
            oprot.writeI32(_iter711);
          }
        }
      }
      if (struct.isSetTeachingclassClassroomList()) {
        {
          oprot.writeI32(struct.teachingclassClassroomList.size());
          for (int _iter712 : struct.teachingclassClassroomList)
          {
            oprot.writeI32(_iter712);
          }
        }
      }
      if (struct.isSetPositiveClassSchedule()) {
        {
          oprot.writeI32(struct.positiveClassSchedule.size());
          for (java.util.List<java.lang.Integer> _iter713 : struct.positiveClassSchedule)
          {
            {
              oprot.writeI32(_iter713.size());
              for (int _iter714 : _iter713)
              {
                oprot.writeI32(_iter714);
              }
            }
          }
        }
      }
      if (struct.isSetNegativeClassSchedule()) {
        {
          oprot.writeI32(struct.negativeClassSchedule.size());
          for (java.util.List<java.lang.Integer> _iter715 : struct.negativeClassSchedule)
          {
            {
              oprot.writeI32(_iter715.size());
              for (int _iter716 : _iter715)
              {
                oprot.writeI32(_iter716);
              }
            }
          }
        }
      }
      if (struct.isSetConnectClass()) {
        {
          oprot.writeI32(struct.connectClass.size());
          for (java.util.List<java.lang.Integer> _iter717 : struct.connectClass)
          {
            {
              oprot.writeI32(_iter717.size());
              for (int _iter718 : _iter717)
              {
                oprot.writeI32(_iter718);
              }
            }
          }
        }
      }
      if (struct.isSetPopulationSize()) {
        oprot.writeI32(struct.populationSize);
      }
      if (struct.isSetMaxPopulationSize()) {
        oprot.writeI32(struct.maxPopulationSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ClassScheduleRule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.StageFiveResultOfClassStrategy = new StageFiveResultOfClassStrategy();
        struct.StageFiveResultOfClassStrategy.read(iprot);
        struct.setStageFiveResultOfClassStrategyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map719 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.subjectSubjectcount = new java.util.HashMap<java.lang.Integer,java.lang.Short>(2*_map719.size);
          int _key720;
          short _val721;
          for (int _i722 = 0; _i722 < _map719.size; ++_i722)
          {
            _key720 = iprot.readI32();
            _val721 = iprot.readI16();
            struct.subjectSubjectcount.put(_key720, _val721);
          }
        }
        struct.setSubjectSubjectcountIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list723 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.onedaySession = new java.util.ArrayList<java.lang.Short>(_list723.size);
          short _elem724;
          for (int _i725 = 0; _i725 < _list723.size; ++_i725)
          {
            _elem724 = iprot.readI16();
            struct.onedaySession.add(_elem724);
          }
        }
        struct.setOnedaySessionIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list726 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.teacherList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Short>>(_list726.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Short> _elem727;
          for (int _i728 = 0; _i728 < _list726.size; ++_i728)
          {
            {
              org.apache.thrift.protocol.TMap _map729 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I16, iprot.readI32());
              _elem727 = new java.util.HashMap<java.lang.Integer,java.lang.Short>(2*_map729.size);
              int _key730;
              short _val731;
              for (int _i732 = 0; _i732 < _map729.size; ++_i732)
              {
                _key730 = iprot.readI32();
                _val731 = iprot.readI16();
                _elem727.put(_key730, _val731);
              }
            }
            struct.teacherList.add(_elem727);
          }
        }
        struct.setTeacherListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list733 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.teachingclassTeacherList = new java.util.ArrayList<java.lang.Integer>(_list733.size);
          int _elem734;
          for (int _i735 = 0; _i735 < _list733.size; ++_i735)
          {
            _elem734 = iprot.readI32();
            struct.teachingclassTeacherList.add(_elem734);
          }
        }
        struct.setTeachingclassTeacherListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list736 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.classroomList = new java.util.ArrayList<java.lang.Integer>(_list736.size);
          int _elem737;
          for (int _i738 = 0; _i738 < _list736.size; ++_i738)
          {
            _elem737 = iprot.readI32();
            struct.classroomList.add(_elem737);
          }
        }
        struct.setClassroomListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list739 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.teachingclassClassroomList = new java.util.ArrayList<java.lang.Integer>(_list739.size);
          int _elem740;
          for (int _i741 = 0; _i741 < _list739.size; ++_i741)
          {
            _elem740 = iprot.readI32();
            struct.teachingclassClassroomList.add(_elem740);
          }
        }
        struct.setTeachingclassClassroomListIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list742 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.positiveClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list742.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem743;
          for (int _i744 = 0; _i744 < _list742.size; ++_i744)
          {
            {
              org.apache.thrift.protocol.TList _list745 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem743 = new java.util.ArrayList<java.lang.Integer>(_list745.size);
              int _elem746;
              for (int _i747 = 0; _i747 < _list745.size; ++_i747)
              {
                _elem746 = iprot.readI32();
                _elem743.add(_elem746);
              }
            }
            struct.positiveClassSchedule.add(_elem743);
          }
        }
        struct.setPositiveClassScheduleIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list748 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.negativeClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list748.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem749;
          for (int _i750 = 0; _i750 < _list748.size; ++_i750)
          {
            {
              org.apache.thrift.protocol.TList _list751 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem749 = new java.util.ArrayList<java.lang.Integer>(_list751.size);
              int _elem752;
              for (int _i753 = 0; _i753 < _list751.size; ++_i753)
              {
                _elem752 = iprot.readI32();
                _elem749.add(_elem752);
              }
            }
            struct.negativeClassSchedule.add(_elem749);
          }
        }
        struct.setNegativeClassScheduleIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list754 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.connectClass = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list754.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem755;
          for (int _i756 = 0; _i756 < _list754.size; ++_i756)
          {
            {
              org.apache.thrift.protocol.TList _list757 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem755 = new java.util.ArrayList<java.lang.Integer>(_list757.size);
              int _elem758;
              for (int _i759 = 0; _i759 < _list757.size; ++_i759)
              {
                _elem758 = iprot.readI32();
                _elem755.add(_elem758);
              }
            }
            struct.connectClass.add(_elem755);
          }
        }
        struct.setConnectClassIsSet(true);
      }
      if (incoming.get(10)) {
        struct.populationSize = iprot.readI32();
        struct.setPopulationSizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.maxPopulationSize = iprot.readI32();
        struct.setMaxPopulationSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

