/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package goclass.rpc.server.source;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-07")
public class StageFiveResultOfClassStrategy implements org.apache.thrift.TBase<StageFiveResultOfClassStrategy, StageFiveResultOfClassStrategy._Fields>, java.io.Serializable, Cloneable, Comparable<StageFiveResultOfClassStrategy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageFiveResultOfClassStrategy");

  private static final org.apache.thrift.protocol.TField SUBJECT_DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectDict", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField ADMINCLASS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("adminclassList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TEACHINGCLASS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingclassList", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField MIXTEACHINGCLASS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mixteachingclassList", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField TEACHINGCLASS_INDEX_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("teachingclassIndexList", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField ADMINCLASS_MIXTEACHINGCLASS_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("adminclassMixteachingclassList", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField MIXTEACHINGCLASS_ADMINCLASSES_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("mixteachingclassAdminclassesList", org.apache.thrift.protocol.TType.LIST, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StageFiveResultOfClassStrategyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StageFiveResultOfClassStrategyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> subjectDict; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> adminclassList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> teachingclassList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> mixteachingclassList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> teachingclassIndexList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> adminclassMixteachingclassList; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> mixteachingclassAdminclassesList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBJECT_DICT((short)1, "subjectDict"),
    ADMINCLASS_LIST((short)2, "adminclassList"),
    TEACHINGCLASS_LIST((short)3, "teachingclassList"),
    MIXTEACHINGCLASS_LIST((short)4, "mixteachingclassList"),
    TEACHINGCLASS_INDEX_LIST((short)5, "teachingclassIndexList"),
    ADMINCLASS_MIXTEACHINGCLASS_LIST((short)6, "adminclassMixteachingclassList"),
    MIXTEACHINGCLASS_ADMINCLASSES_LIST((short)7, "mixteachingclassAdminclassesList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBJECT_DICT
          return SUBJECT_DICT;
        case 2: // ADMINCLASS_LIST
          return ADMINCLASS_LIST;
        case 3: // TEACHINGCLASS_LIST
          return TEACHINGCLASS_LIST;
        case 4: // MIXTEACHINGCLASS_LIST
          return MIXTEACHINGCLASS_LIST;
        case 5: // TEACHINGCLASS_INDEX_LIST
          return TEACHINGCLASS_INDEX_LIST;
        case 6: // ADMINCLASS_MIXTEACHINGCLASS_LIST
          return ADMINCLASS_MIXTEACHINGCLASS_LIST;
        case 7: // MIXTEACHINGCLASS_ADMINCLASSES_LIST
          return MIXTEACHINGCLASS_ADMINCLASSES_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBJECT_DICT, new org.apache.thrift.meta_data.FieldMetaData("subjectDict", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ADMINCLASS_LIST, new org.apache.thrift.meta_data.FieldMetaData("adminclassList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    tmpMap.put(_Fields.TEACHINGCLASS_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachingclassList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    tmpMap.put(_Fields.MIXTEACHINGCLASS_LIST, new org.apache.thrift.meta_data.FieldMetaData("mixteachingclassList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.TEACHINGCLASS_INDEX_LIST, new org.apache.thrift.meta_data.FieldMetaData("teachingclassIndexList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.ADMINCLASS_MIXTEACHINGCLASS_LIST, new org.apache.thrift.meta_data.FieldMetaData("adminclassMixteachingclassList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.MIXTEACHINGCLASS_ADMINCLASSES_LIST, new org.apache.thrift.meta_data.FieldMetaData("mixteachingclassAdminclassesList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageFiveResultOfClassStrategy.class, metaDataMap);
  }

  public StageFiveResultOfClassStrategy() {
  }

  public StageFiveResultOfClassStrategy(
    java.util.Map<java.lang.String,java.lang.Integer> subjectDict,
    java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> adminclassList,
    java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> teachingclassList,
    java.util.List<java.util.List<java.lang.Integer>> mixteachingclassList,
    java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> teachingclassIndexList,
    java.util.List<java.util.List<java.lang.Integer>> adminclassMixteachingclassList,
    java.util.List<java.util.List<java.lang.Integer>> mixteachingclassAdminclassesList)
  {
    this();
    this.subjectDict = subjectDict;
    this.adminclassList = adminclassList;
    this.teachingclassList = teachingclassList;
    this.mixteachingclassList = mixteachingclassList;
    this.teachingclassIndexList = teachingclassIndexList;
    this.adminclassMixteachingclassList = adminclassMixteachingclassList;
    this.mixteachingclassAdminclassesList = mixteachingclassAdminclassesList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageFiveResultOfClassStrategy(StageFiveResultOfClassStrategy other) {
    if (other.isSetSubjectDict()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this__subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.subjectDict);
      this.subjectDict = __this__subjectDict;
    }
    if (other.isSetAdminclassList()) {
      java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> __this__adminclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(other.adminclassList.size());
      for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> other_element : other.adminclassList) {
        java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> __this__adminclassList_copy = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> other_element_element : other_element.entrySet()) {

          java.lang.Integer other_element_element_key = other_element_element.getKey();
          java.util.List<java.lang.Integer> other_element_element_value = other_element_element.getValue();

          java.lang.Integer __this__adminclassList_copy_copy_key = other_element_element_key;

          java.util.List<java.lang.Integer> __this__adminclassList_copy_copy_value = new java.util.ArrayList<java.lang.Integer>(other_element_element_value);

          __this__adminclassList_copy.put(__this__adminclassList_copy_copy_key, __this__adminclassList_copy_copy_value);
        }
        __this__adminclassList.add(__this__adminclassList_copy);
      }
      this.adminclassList = __this__adminclassList;
    }
    if (other.isSetTeachingclassList()) {
      java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> __this__teachingclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(other.teachingclassList.size());
      for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> other_element : other.teachingclassList) {
        java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> __this__teachingclassList_copy = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> other_element_element : other_element.entrySet()) {

          java.lang.Integer other_element_element_key = other_element_element.getKey();
          java.util.List<java.lang.Integer> other_element_element_value = other_element_element.getValue();

          java.lang.Integer __this__teachingclassList_copy_copy_key = other_element_element_key;

          java.util.List<java.lang.Integer> __this__teachingclassList_copy_copy_value = new java.util.ArrayList<java.lang.Integer>(other_element_element_value);

          __this__teachingclassList_copy.put(__this__teachingclassList_copy_copy_key, __this__teachingclassList_copy_copy_value);
        }
        __this__teachingclassList.add(__this__teachingclassList_copy);
      }
      this.teachingclassList = __this__teachingclassList;
    }
    if (other.isSetMixteachingclassList()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__mixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.mixteachingclassList.size());
      for (java.util.List<java.lang.Integer> other_element : other.mixteachingclassList) {
        java.util.List<java.lang.Integer> __this__mixteachingclassList_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__mixteachingclassList.add(__this__mixteachingclassList_copy);
      }
      this.mixteachingclassList = __this__mixteachingclassList;
    }
    if (other.isSetTeachingclassIndexList()) {
      java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> __this__teachingclassIndexList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(other.teachingclassIndexList.size());
      for (java.util.Map<java.lang.Integer,java.lang.Integer> other_element : other.teachingclassIndexList) {
        java.util.Map<java.lang.Integer,java.lang.Integer> __this__teachingclassIndexList_copy = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other_element);
        __this__teachingclassIndexList.add(__this__teachingclassIndexList_copy);
      }
      this.teachingclassIndexList = __this__teachingclassIndexList;
    }
    if (other.isSetAdminclassMixteachingclassList()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__adminclassMixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.adminclassMixteachingclassList.size());
      for (java.util.List<java.lang.Integer> other_element : other.adminclassMixteachingclassList) {
        java.util.List<java.lang.Integer> __this__adminclassMixteachingclassList_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__adminclassMixteachingclassList.add(__this__adminclassMixteachingclassList_copy);
      }
      this.adminclassMixteachingclassList = __this__adminclassMixteachingclassList;
    }
    if (other.isSetMixteachingclassAdminclassesList()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__mixteachingclassAdminclassesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.mixteachingclassAdminclassesList.size());
      for (java.util.List<java.lang.Integer> other_element : other.mixteachingclassAdminclassesList) {
        java.util.List<java.lang.Integer> __this__mixteachingclassAdminclassesList_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__mixteachingclassAdminclassesList.add(__this__mixteachingclassAdminclassesList_copy);
      }
      this.mixteachingclassAdminclassesList = __this__mixteachingclassAdminclassesList;
    }
  }

  public StageFiveResultOfClassStrategy deepCopy() {
    return new StageFiveResultOfClassStrategy(this);
  }

  @Override
  public void clear() {
    this.subjectDict = null;
    this.adminclassList = null;
    this.teachingclassList = null;
    this.mixteachingclassList = null;
    this.teachingclassIndexList = null;
    this.adminclassMixteachingclassList = null;
    this.mixteachingclassAdminclassesList = null;
  }

  public int getSubjectDictSize() {
    return (this.subjectDict == null) ? 0 : this.subjectDict.size();
  }

  public void putToSubjectDict(java.lang.String key, int val) {
    if (this.subjectDict == null) {
      this.subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this.subjectDict.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Integer> getSubjectDict() {
    return this.subjectDict;
  }

  public StageFiveResultOfClassStrategy setSubjectDict(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> subjectDict) {
    this.subjectDict = subjectDict;
    return this;
  }

  public void unsetSubjectDict() {
    this.subjectDict = null;
  }

  /** Returns true if field subjectDict is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectDict() {
    return this.subjectDict != null;
  }

  public void setSubjectDictIsSet(boolean value) {
    if (!value) {
      this.subjectDict = null;
    }
  }

  public int getAdminclassListSize() {
    return (this.adminclassList == null) ? 0 : this.adminclassList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> getAdminclassListIterator() {
    return (this.adminclassList == null) ? null : this.adminclassList.iterator();
  }

  public void addToAdminclassList(java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> elem) {
    if (this.adminclassList == null) {
      this.adminclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>();
    }
    this.adminclassList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> getAdminclassList() {
    return this.adminclassList;
  }

  public StageFiveResultOfClassStrategy setAdminclassList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> adminclassList) {
    this.adminclassList = adminclassList;
    return this;
  }

  public void unsetAdminclassList() {
    this.adminclassList = null;
  }

  /** Returns true if field adminclassList is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminclassList() {
    return this.adminclassList != null;
  }

  public void setAdminclassListIsSet(boolean value) {
    if (!value) {
      this.adminclassList = null;
    }
  }

  public int getTeachingclassListSize() {
    return (this.teachingclassList == null) ? 0 : this.teachingclassList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> getTeachingclassListIterator() {
    return (this.teachingclassList == null) ? null : this.teachingclassList.iterator();
  }

  public void addToTeachingclassList(java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> elem) {
    if (this.teachingclassList == null) {
      this.teachingclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>();
    }
    this.teachingclassList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> getTeachingclassList() {
    return this.teachingclassList;
  }

  public StageFiveResultOfClassStrategy setTeachingclassList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> teachingclassList) {
    this.teachingclassList = teachingclassList;
    return this;
  }

  public void unsetTeachingclassList() {
    this.teachingclassList = null;
  }

  /** Returns true if field teachingclassList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingclassList() {
    return this.teachingclassList != null;
  }

  public void setTeachingclassListIsSet(boolean value) {
    if (!value) {
      this.teachingclassList = null;
    }
  }

  public int getMixteachingclassListSize() {
    return (this.mixteachingclassList == null) ? 0 : this.mixteachingclassList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getMixteachingclassListIterator() {
    return (this.mixteachingclassList == null) ? null : this.mixteachingclassList.iterator();
  }

  public void addToMixteachingclassList(java.util.List<java.lang.Integer> elem) {
    if (this.mixteachingclassList == null) {
      this.mixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.mixteachingclassList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getMixteachingclassList() {
    return this.mixteachingclassList;
  }

  public StageFiveResultOfClassStrategy setMixteachingclassList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> mixteachingclassList) {
    this.mixteachingclassList = mixteachingclassList;
    return this;
  }

  public void unsetMixteachingclassList() {
    this.mixteachingclassList = null;
  }

  /** Returns true if field mixteachingclassList is set (has been assigned a value) and false otherwise */
  public boolean isSetMixteachingclassList() {
    return this.mixteachingclassList != null;
  }

  public void setMixteachingclassListIsSet(boolean value) {
    if (!value) {
      this.mixteachingclassList = null;
    }
  }

  public int getTeachingclassIndexListSize() {
    return (this.teachingclassIndexList == null) ? 0 : this.teachingclassIndexList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.Integer,java.lang.Integer>> getTeachingclassIndexListIterator() {
    return (this.teachingclassIndexList == null) ? null : this.teachingclassIndexList.iterator();
  }

  public void addToTeachingclassIndexList(java.util.Map<java.lang.Integer,java.lang.Integer> elem) {
    if (this.teachingclassIndexList == null) {
      this.teachingclassIndexList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>();
    }
    this.teachingclassIndexList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> getTeachingclassIndexList() {
    return this.teachingclassIndexList;
  }

  public StageFiveResultOfClassStrategy setTeachingclassIndexList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> teachingclassIndexList) {
    this.teachingclassIndexList = teachingclassIndexList;
    return this;
  }

  public void unsetTeachingclassIndexList() {
    this.teachingclassIndexList = null;
  }

  /** Returns true if field teachingclassIndexList is set (has been assigned a value) and false otherwise */
  public boolean isSetTeachingclassIndexList() {
    return this.teachingclassIndexList != null;
  }

  public void setTeachingclassIndexListIsSet(boolean value) {
    if (!value) {
      this.teachingclassIndexList = null;
    }
  }

  public int getAdminclassMixteachingclassListSize() {
    return (this.adminclassMixteachingclassList == null) ? 0 : this.adminclassMixteachingclassList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getAdminclassMixteachingclassListIterator() {
    return (this.adminclassMixteachingclassList == null) ? null : this.adminclassMixteachingclassList.iterator();
  }

  public void addToAdminclassMixteachingclassList(java.util.List<java.lang.Integer> elem) {
    if (this.adminclassMixteachingclassList == null) {
      this.adminclassMixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.adminclassMixteachingclassList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getAdminclassMixteachingclassList() {
    return this.adminclassMixteachingclassList;
  }

  public StageFiveResultOfClassStrategy setAdminclassMixteachingclassList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> adminclassMixteachingclassList) {
    this.adminclassMixteachingclassList = adminclassMixteachingclassList;
    return this;
  }

  public void unsetAdminclassMixteachingclassList() {
    this.adminclassMixteachingclassList = null;
  }

  /** Returns true if field adminclassMixteachingclassList is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminclassMixteachingclassList() {
    return this.adminclassMixteachingclassList != null;
  }

  public void setAdminclassMixteachingclassListIsSet(boolean value) {
    if (!value) {
      this.adminclassMixteachingclassList = null;
    }
  }

  public int getMixteachingclassAdminclassesListSize() {
    return (this.mixteachingclassAdminclassesList == null) ? 0 : this.mixteachingclassAdminclassesList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getMixteachingclassAdminclassesListIterator() {
    return (this.mixteachingclassAdminclassesList == null) ? null : this.mixteachingclassAdminclassesList.iterator();
  }

  public void addToMixteachingclassAdminclassesList(java.util.List<java.lang.Integer> elem) {
    if (this.mixteachingclassAdminclassesList == null) {
      this.mixteachingclassAdminclassesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.mixteachingclassAdminclassesList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getMixteachingclassAdminclassesList() {
    return this.mixteachingclassAdminclassesList;
  }

  public StageFiveResultOfClassStrategy setMixteachingclassAdminclassesList(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> mixteachingclassAdminclassesList) {
    this.mixteachingclassAdminclassesList = mixteachingclassAdminclassesList;
    return this;
  }

  public void unsetMixteachingclassAdminclassesList() {
    this.mixteachingclassAdminclassesList = null;
  }

  /** Returns true if field mixteachingclassAdminclassesList is set (has been assigned a value) and false otherwise */
  public boolean isSetMixteachingclassAdminclassesList() {
    return this.mixteachingclassAdminclassesList != null;
  }

  public void setMixteachingclassAdminclassesListIsSet(boolean value) {
    if (!value) {
      this.mixteachingclassAdminclassesList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUBJECT_DICT:
      if (value == null) {
        unsetSubjectDict();
      } else {
        setSubjectDict((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case ADMINCLASS_LIST:
      if (value == null) {
        unsetAdminclassList();
      } else {
        setAdminclassList((java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>)value);
      }
      break;

    case TEACHINGCLASS_LIST:
      if (value == null) {
        unsetTeachingclassList();
      } else {
        setTeachingclassList((java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>)value);
      }
      break;

    case MIXTEACHINGCLASS_LIST:
      if (value == null) {
        unsetMixteachingclassList();
      } else {
        setMixteachingclassList((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case TEACHINGCLASS_INDEX_LIST:
      if (value == null) {
        unsetTeachingclassIndexList();
      } else {
        setTeachingclassIndexList((java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>)value);
      }
      break;

    case ADMINCLASS_MIXTEACHINGCLASS_LIST:
      if (value == null) {
        unsetAdminclassMixteachingclassList();
      } else {
        setAdminclassMixteachingclassList((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case MIXTEACHINGCLASS_ADMINCLASSES_LIST:
      if (value == null) {
        unsetMixteachingclassAdminclassesList();
      } else {
        setMixteachingclassAdminclassesList((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBJECT_DICT:
      return getSubjectDict();

    case ADMINCLASS_LIST:
      return getAdminclassList();

    case TEACHINGCLASS_LIST:
      return getTeachingclassList();

    case MIXTEACHINGCLASS_LIST:
      return getMixteachingclassList();

    case TEACHINGCLASS_INDEX_LIST:
      return getTeachingclassIndexList();

    case ADMINCLASS_MIXTEACHINGCLASS_LIST:
      return getAdminclassMixteachingclassList();

    case MIXTEACHINGCLASS_ADMINCLASSES_LIST:
      return getMixteachingclassAdminclassesList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUBJECT_DICT:
      return isSetSubjectDict();
    case ADMINCLASS_LIST:
      return isSetAdminclassList();
    case TEACHINGCLASS_LIST:
      return isSetTeachingclassList();
    case MIXTEACHINGCLASS_LIST:
      return isSetMixteachingclassList();
    case TEACHINGCLASS_INDEX_LIST:
      return isSetTeachingclassIndexList();
    case ADMINCLASS_MIXTEACHINGCLASS_LIST:
      return isSetAdminclassMixteachingclassList();
    case MIXTEACHINGCLASS_ADMINCLASSES_LIST:
      return isSetMixteachingclassAdminclassesList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StageFiveResultOfClassStrategy)
      return this.equals((StageFiveResultOfClassStrategy)that);
    return false;
  }

  public boolean equals(StageFiveResultOfClassStrategy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subjectDict = true && this.isSetSubjectDict();
    boolean that_present_subjectDict = true && that.isSetSubjectDict();
    if (this_present_subjectDict || that_present_subjectDict) {
      if (!(this_present_subjectDict && that_present_subjectDict))
        return false;
      if (!this.subjectDict.equals(that.subjectDict))
        return false;
    }

    boolean this_present_adminclassList = true && this.isSetAdminclassList();
    boolean that_present_adminclassList = true && that.isSetAdminclassList();
    if (this_present_adminclassList || that_present_adminclassList) {
      if (!(this_present_adminclassList && that_present_adminclassList))
        return false;
      if (!this.adminclassList.equals(that.adminclassList))
        return false;
    }

    boolean this_present_teachingclassList = true && this.isSetTeachingclassList();
    boolean that_present_teachingclassList = true && that.isSetTeachingclassList();
    if (this_present_teachingclassList || that_present_teachingclassList) {
      if (!(this_present_teachingclassList && that_present_teachingclassList))
        return false;
      if (!this.teachingclassList.equals(that.teachingclassList))
        return false;
    }

    boolean this_present_mixteachingclassList = true && this.isSetMixteachingclassList();
    boolean that_present_mixteachingclassList = true && that.isSetMixteachingclassList();
    if (this_present_mixteachingclassList || that_present_mixteachingclassList) {
      if (!(this_present_mixteachingclassList && that_present_mixteachingclassList))
        return false;
      if (!this.mixteachingclassList.equals(that.mixteachingclassList))
        return false;
    }

    boolean this_present_teachingclassIndexList = true && this.isSetTeachingclassIndexList();
    boolean that_present_teachingclassIndexList = true && that.isSetTeachingclassIndexList();
    if (this_present_teachingclassIndexList || that_present_teachingclassIndexList) {
      if (!(this_present_teachingclassIndexList && that_present_teachingclassIndexList))
        return false;
      if (!this.teachingclassIndexList.equals(that.teachingclassIndexList))
        return false;
    }

    boolean this_present_adminclassMixteachingclassList = true && this.isSetAdminclassMixteachingclassList();
    boolean that_present_adminclassMixteachingclassList = true && that.isSetAdminclassMixteachingclassList();
    if (this_present_adminclassMixteachingclassList || that_present_adminclassMixteachingclassList) {
      if (!(this_present_adminclassMixteachingclassList && that_present_adminclassMixteachingclassList))
        return false;
      if (!this.adminclassMixteachingclassList.equals(that.adminclassMixteachingclassList))
        return false;
    }

    boolean this_present_mixteachingclassAdminclassesList = true && this.isSetMixteachingclassAdminclassesList();
    boolean that_present_mixteachingclassAdminclassesList = true && that.isSetMixteachingclassAdminclassesList();
    if (this_present_mixteachingclassAdminclassesList || that_present_mixteachingclassAdminclassesList) {
      if (!(this_present_mixteachingclassAdminclassesList && that_present_mixteachingclassAdminclassesList))
        return false;
      if (!this.mixteachingclassAdminclassesList.equals(that.mixteachingclassAdminclassesList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSubjectDict()) ? 131071 : 524287);
    if (isSetSubjectDict())
      hashCode = hashCode * 8191 + subjectDict.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdminclassList()) ? 131071 : 524287);
    if (isSetAdminclassList())
      hashCode = hashCode * 8191 + adminclassList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeachingclassList()) ? 131071 : 524287);
    if (isSetTeachingclassList())
      hashCode = hashCode * 8191 + teachingclassList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMixteachingclassList()) ? 131071 : 524287);
    if (isSetMixteachingclassList())
      hashCode = hashCode * 8191 + mixteachingclassList.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeachingclassIndexList()) ? 131071 : 524287);
    if (isSetTeachingclassIndexList())
      hashCode = hashCode * 8191 + teachingclassIndexList.hashCode();

    hashCode = hashCode * 8191 + ((isSetAdminclassMixteachingclassList()) ? 131071 : 524287);
    if (isSetAdminclassMixteachingclassList())
      hashCode = hashCode * 8191 + adminclassMixteachingclassList.hashCode();

    hashCode = hashCode * 8191 + ((isSetMixteachingclassAdminclassesList()) ? 131071 : 524287);
    if (isSetMixteachingclassAdminclassesList())
      hashCode = hashCode * 8191 + mixteachingclassAdminclassesList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StageFiveResultOfClassStrategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSubjectDict()).compareTo(other.isSetSubjectDict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectDict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectDict, other.subjectDict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdminclassList()).compareTo(other.isSetAdminclassList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminclassList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminclassList, other.adminclassList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeachingclassList()).compareTo(other.isSetTeachingclassList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingclassList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingclassList, other.teachingclassList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMixteachingclassList()).compareTo(other.isSetMixteachingclassList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMixteachingclassList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mixteachingclassList, other.mixteachingclassList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeachingclassIndexList()).compareTo(other.isSetTeachingclassIndexList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeachingclassIndexList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teachingclassIndexList, other.teachingclassIndexList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdminclassMixteachingclassList()).compareTo(other.isSetAdminclassMixteachingclassList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminclassMixteachingclassList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminclassMixteachingclassList, other.adminclassMixteachingclassList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMixteachingclassAdminclassesList()).compareTo(other.isSetMixteachingclassAdminclassesList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMixteachingclassAdminclassesList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mixteachingclassAdminclassesList, other.mixteachingclassAdminclassesList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StageFiveResultOfClassStrategy(");
    boolean first = true;

    sb.append("subjectDict:");
    if (this.subjectDict == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectDict);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adminclassList:");
    if (this.adminclassList == null) {
      sb.append("null");
    } else {
      sb.append(this.adminclassList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingclassList:");
    if (this.teachingclassList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingclassList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mixteachingclassList:");
    if (this.mixteachingclassList == null) {
      sb.append("null");
    } else {
      sb.append(this.mixteachingclassList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teachingclassIndexList:");
    if (this.teachingclassIndexList == null) {
      sb.append("null");
    } else {
      sb.append(this.teachingclassIndexList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adminclassMixteachingclassList:");
    if (this.adminclassMixteachingclassList == null) {
      sb.append("null");
    } else {
      sb.append(this.adminclassMixteachingclassList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mixteachingclassAdminclassesList:");
    if (this.mixteachingclassAdminclassesList == null) {
      sb.append("null");
    } else {
      sb.append(this.mixteachingclassAdminclassesList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageFiveResultOfClassStrategyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageFiveResultOfClassStrategyStandardScheme getScheme() {
      return new StageFiveResultOfClassStrategyStandardScheme();
    }
  }

  private static class StageFiveResultOfClassStrategyStandardScheme extends org.apache.thrift.scheme.StandardScheme<StageFiveResultOfClassStrategy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageFiveResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBJECT_DICT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map476 = iprot.readMapBegin();
                struct.subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map476.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key477;
                int _val478;
                for (int _i479 = 0; _i479 < _map476.size; ++_i479)
                {
                  _key477 = iprot.readString();
                  _val478 = iprot.readI32();
                  struct.subjectDict.put(_key477, _val478);
                }
                iprot.readMapEnd();
              }
              struct.setSubjectDictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ADMINCLASS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list480 = iprot.readListBegin();
                struct.adminclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(_list480.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _elem481;
                for (int _i482 = 0; _i482 < _list480.size; ++_i482)
                {
                  {
                    org.apache.thrift.protocol.TMap _map483 = iprot.readMapBegin();
                    _elem481 = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map483.size);
                    int _key484;
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val485;
                    for (int _i486 = 0; _i486 < _map483.size; ++_i486)
                    {
                      _key484 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TList _list487 = iprot.readListBegin();
                        _val485 = new java.util.ArrayList<java.lang.Integer>(_list487.size);
                        int _elem488;
                        for (int _i489 = 0; _i489 < _list487.size; ++_i489)
                        {
                          _elem488 = iprot.readI32();
                          _val485.add(_elem488);
                        }
                        iprot.readListEnd();
                      }
                      _elem481.put(_key484, _val485);
                    }
                    iprot.readMapEnd();
                  }
                  struct.adminclassList.add(_elem481);
                }
                iprot.readListEnd();
              }
              struct.setAdminclassListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEACHINGCLASS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list490 = iprot.readListBegin();
                struct.teachingclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(_list490.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _elem491;
                for (int _i492 = 0; _i492 < _list490.size; ++_i492)
                {
                  {
                    org.apache.thrift.protocol.TMap _map493 = iprot.readMapBegin();
                    _elem491 = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map493.size);
                    int _key494;
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val495;
                    for (int _i496 = 0; _i496 < _map493.size; ++_i496)
                    {
                      _key494 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TList _list497 = iprot.readListBegin();
                        _val495 = new java.util.ArrayList<java.lang.Integer>(_list497.size);
                        int _elem498;
                        for (int _i499 = 0; _i499 < _list497.size; ++_i499)
                        {
                          _elem498 = iprot.readI32();
                          _val495.add(_elem498);
                        }
                        iprot.readListEnd();
                      }
                      _elem491.put(_key494, _val495);
                    }
                    iprot.readMapEnd();
                  }
                  struct.teachingclassList.add(_elem491);
                }
                iprot.readListEnd();
              }
              struct.setTeachingclassListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MIXTEACHINGCLASS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list500 = iprot.readListBegin();
                struct.mixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list500.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem501;
                for (int _i502 = 0; _i502 < _list500.size; ++_i502)
                {
                  {
                    org.apache.thrift.protocol.TList _list503 = iprot.readListBegin();
                    _elem501 = new java.util.ArrayList<java.lang.Integer>(_list503.size);
                    int _elem504;
                    for (int _i505 = 0; _i505 < _list503.size; ++_i505)
                    {
                      _elem504 = iprot.readI32();
                      _elem501.add(_elem504);
                    }
                    iprot.readListEnd();
                  }
                  struct.mixteachingclassList.add(_elem501);
                }
                iprot.readListEnd();
              }
              struct.setMixteachingclassListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TEACHINGCLASS_INDEX_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list506 = iprot.readListBegin();
                struct.teachingclassIndexList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list506.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> _elem507;
                for (int _i508 = 0; _i508 < _list506.size; ++_i508)
                {
                  {
                    org.apache.thrift.protocol.TMap _map509 = iprot.readMapBegin();
                    _elem507 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map509.size);
                    int _key510;
                    int _val511;
                    for (int _i512 = 0; _i512 < _map509.size; ++_i512)
                    {
                      _key510 = iprot.readI32();
                      _val511 = iprot.readI32();
                      _elem507.put(_key510, _val511);
                    }
                    iprot.readMapEnd();
                  }
                  struct.teachingclassIndexList.add(_elem507);
                }
                iprot.readListEnd();
              }
              struct.setTeachingclassIndexListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ADMINCLASS_MIXTEACHINGCLASS_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list513 = iprot.readListBegin();
                struct.adminclassMixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list513.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem514;
                for (int _i515 = 0; _i515 < _list513.size; ++_i515)
                {
                  {
                    org.apache.thrift.protocol.TList _list516 = iprot.readListBegin();
                    _elem514 = new java.util.ArrayList<java.lang.Integer>(_list516.size);
                    int _elem517;
                    for (int _i518 = 0; _i518 < _list516.size; ++_i518)
                    {
                      _elem517 = iprot.readI32();
                      _elem514.add(_elem517);
                    }
                    iprot.readListEnd();
                  }
                  struct.adminclassMixteachingclassList.add(_elem514);
                }
                iprot.readListEnd();
              }
              struct.setAdminclassMixteachingclassListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MIXTEACHINGCLASS_ADMINCLASSES_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list519 = iprot.readListBegin();
                struct.mixteachingclassAdminclassesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list519.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem520;
                for (int _i521 = 0; _i521 < _list519.size; ++_i521)
                {
                  {
                    org.apache.thrift.protocol.TList _list522 = iprot.readListBegin();
                    _elem520 = new java.util.ArrayList<java.lang.Integer>(_list522.size);
                    int _elem523;
                    for (int _i524 = 0; _i524 < _list522.size; ++_i524)
                    {
                      _elem523 = iprot.readI32();
                      _elem520.add(_elem523);
                    }
                    iprot.readListEnd();
                  }
                  struct.mixteachingclassAdminclassesList.add(_elem520);
                }
                iprot.readListEnd();
              }
              struct.setMixteachingclassAdminclassesListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageFiveResultOfClassStrategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subjectDict != null) {
        oprot.writeFieldBegin(SUBJECT_DICT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.subjectDict.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter525 : struct.subjectDict.entrySet())
          {
            oprot.writeString(_iter525.getKey());
            oprot.writeI32(_iter525.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.adminclassList != null) {
        oprot.writeFieldBegin(ADMINCLASS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.adminclassList.size()));
          for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _iter526 : struct.adminclassList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, _iter526.size()));
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter527 : _iter526.entrySet())
              {
                oprot.writeI32(_iter527.getKey());
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter527.getValue().size()));
                  for (int _iter528 : _iter527.getValue())
                  {
                    oprot.writeI32(_iter528);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachingclassList != null) {
        oprot.writeFieldBegin(TEACHINGCLASS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.teachingclassList.size()));
          for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _iter529 : struct.teachingclassList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, _iter529.size()));
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter530 : _iter529.entrySet())
              {
                oprot.writeI32(_iter530.getKey());
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter530.getValue().size()));
                  for (int _iter531 : _iter530.getValue())
                  {
                    oprot.writeI32(_iter531);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mixteachingclassList != null) {
        oprot.writeFieldBegin(MIXTEACHINGCLASS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.mixteachingclassList.size()));
          for (java.util.List<java.lang.Integer> _iter532 : struct.mixteachingclassList)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter532.size()));
              for (int _iter533 : _iter532)
              {
                oprot.writeI32(_iter533);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.teachingclassIndexList != null) {
        oprot.writeFieldBegin(TEACHINGCLASS_INDEX_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.teachingclassIndexList.size()));
          for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter534 : struct.teachingclassIndexList)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter534.size()));
              for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter535 : _iter534.entrySet())
              {
                oprot.writeI32(_iter535.getKey());
                oprot.writeI32(_iter535.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.adminclassMixteachingclassList != null) {
        oprot.writeFieldBegin(ADMINCLASS_MIXTEACHINGCLASS_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.adminclassMixteachingclassList.size()));
          for (java.util.List<java.lang.Integer> _iter536 : struct.adminclassMixteachingclassList)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter536.size()));
              for (int _iter537 : _iter536)
              {
                oprot.writeI32(_iter537);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mixteachingclassAdminclassesList != null) {
        oprot.writeFieldBegin(MIXTEACHINGCLASS_ADMINCLASSES_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.mixteachingclassAdminclassesList.size()));
          for (java.util.List<java.lang.Integer> _iter538 : struct.mixteachingclassAdminclassesList)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter538.size()));
              for (int _iter539 : _iter538)
              {
                oprot.writeI32(_iter539);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageFiveResultOfClassStrategyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageFiveResultOfClassStrategyTupleScheme getScheme() {
      return new StageFiveResultOfClassStrategyTupleScheme();
    }
  }

  private static class StageFiveResultOfClassStrategyTupleScheme extends org.apache.thrift.scheme.TupleScheme<StageFiveResultOfClassStrategy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageFiveResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSubjectDict()) {
        optionals.set(0);
      }
      if (struct.isSetAdminclassList()) {
        optionals.set(1);
      }
      if (struct.isSetTeachingclassList()) {
        optionals.set(2);
      }
      if (struct.isSetMixteachingclassList()) {
        optionals.set(3);
      }
      if (struct.isSetTeachingclassIndexList()) {
        optionals.set(4);
      }
      if (struct.isSetAdminclassMixteachingclassList()) {
        optionals.set(5);
      }
      if (struct.isSetMixteachingclassAdminclassesList()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSubjectDict()) {
        {
          oprot.writeI32(struct.subjectDict.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter540 : struct.subjectDict.entrySet())
          {
            oprot.writeString(_iter540.getKey());
            oprot.writeI32(_iter540.getValue());
          }
        }
      }
      if (struct.isSetAdminclassList()) {
        {
          oprot.writeI32(struct.adminclassList.size());
          for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _iter541 : struct.adminclassList)
          {
            {
              oprot.writeI32(_iter541.size());
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter542 : _iter541.entrySet())
              {
                oprot.writeI32(_iter542.getKey());
                {
                  oprot.writeI32(_iter542.getValue().size());
                  for (int _iter543 : _iter542.getValue())
                  {
                    oprot.writeI32(_iter543);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetTeachingclassList()) {
        {
          oprot.writeI32(struct.teachingclassList.size());
          for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _iter544 : struct.teachingclassList)
          {
            {
              oprot.writeI32(_iter544.size());
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter545 : _iter544.entrySet())
              {
                oprot.writeI32(_iter545.getKey());
                {
                  oprot.writeI32(_iter545.getValue().size());
                  for (int _iter546 : _iter545.getValue())
                  {
                    oprot.writeI32(_iter546);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetMixteachingclassList()) {
        {
          oprot.writeI32(struct.mixteachingclassList.size());
          for (java.util.List<java.lang.Integer> _iter547 : struct.mixteachingclassList)
          {
            {
              oprot.writeI32(_iter547.size());
              for (int _iter548 : _iter547)
              {
                oprot.writeI32(_iter548);
              }
            }
          }
        }
      }
      if (struct.isSetTeachingclassIndexList()) {
        {
          oprot.writeI32(struct.teachingclassIndexList.size());
          for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter549 : struct.teachingclassIndexList)
          {
            {
              oprot.writeI32(_iter549.size());
              for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter550 : _iter549.entrySet())
              {
                oprot.writeI32(_iter550.getKey());
                oprot.writeI32(_iter550.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetAdminclassMixteachingclassList()) {
        {
          oprot.writeI32(struct.adminclassMixteachingclassList.size());
          for (java.util.List<java.lang.Integer> _iter551 : struct.adminclassMixteachingclassList)
          {
            {
              oprot.writeI32(_iter551.size());
              for (int _iter552 : _iter551)
              {
                oprot.writeI32(_iter552);
              }
            }
          }
        }
      }
      if (struct.isSetMixteachingclassAdminclassesList()) {
        {
          oprot.writeI32(struct.mixteachingclassAdminclassesList.size());
          for (java.util.List<java.lang.Integer> _iter553 : struct.mixteachingclassAdminclassesList)
          {
            {
              oprot.writeI32(_iter553.size());
              for (int _iter554 : _iter553)
              {
                oprot.writeI32(_iter554);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageFiveResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map555 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map555.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key556;
          int _val557;
          for (int _i558 = 0; _i558 < _map555.size; ++_i558)
          {
            _key556 = iprot.readString();
            _val557 = iprot.readI32();
            struct.subjectDict.put(_key556, _val557);
          }
        }
        struct.setSubjectDictIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list559 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.adminclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(_list559.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _elem560;
          for (int _i561 = 0; _i561 < _list559.size; ++_i561)
          {
            {
              org.apache.thrift.protocol.TMap _map562 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem560 = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map562.size);
              int _key563;
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val564;
              for (int _i565 = 0; _i565 < _map562.size; ++_i565)
              {
                _key563 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TList _list566 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _val564 = new java.util.ArrayList<java.lang.Integer>(_list566.size);
                  int _elem567;
                  for (int _i568 = 0; _i568 < _list566.size; ++_i568)
                  {
                    _elem567 = iprot.readI32();
                    _val564.add(_elem567);
                  }
                }
                _elem560.put(_key563, _val564);
              }
            }
            struct.adminclassList.add(_elem560);
          }
        }
        struct.setAdminclassListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list569 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.teachingclassList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(_list569.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _elem570;
          for (int _i571 = 0; _i571 < _list569.size; ++_i571)
          {
            {
              org.apache.thrift.protocol.TMap _map572 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem570 = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map572.size);
              int _key573;
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val574;
              for (int _i575 = 0; _i575 < _map572.size; ++_i575)
              {
                _key573 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TList _list576 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _val574 = new java.util.ArrayList<java.lang.Integer>(_list576.size);
                  int _elem577;
                  for (int _i578 = 0; _i578 < _list576.size; ++_i578)
                  {
                    _elem577 = iprot.readI32();
                    _val574.add(_elem577);
                  }
                }
                _elem570.put(_key573, _val574);
              }
            }
            struct.teachingclassList.add(_elem570);
          }
        }
        struct.setTeachingclassListIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list579 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.mixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list579.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem580;
          for (int _i581 = 0; _i581 < _list579.size; ++_i581)
          {
            {
              org.apache.thrift.protocol.TList _list582 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem580 = new java.util.ArrayList<java.lang.Integer>(_list582.size);
              int _elem583;
              for (int _i584 = 0; _i584 < _list582.size; ++_i584)
              {
                _elem583 = iprot.readI32();
                _elem580.add(_elem583);
              }
            }
            struct.mixteachingclassList.add(_elem580);
          }
        }
        struct.setMixteachingclassListIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list585 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.teachingclassIndexList = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list585.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> _elem586;
          for (int _i587 = 0; _i587 < _list585.size; ++_i587)
          {
            {
              org.apache.thrift.protocol.TMap _map588 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem586 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map588.size);
              int _key589;
              int _val590;
              for (int _i591 = 0; _i591 < _map588.size; ++_i591)
              {
                _key589 = iprot.readI32();
                _val590 = iprot.readI32();
                _elem586.put(_key589, _val590);
              }
            }
            struct.teachingclassIndexList.add(_elem586);
          }
        }
        struct.setTeachingclassIndexListIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list592 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.adminclassMixteachingclassList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list592.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem593;
          for (int _i594 = 0; _i594 < _list592.size; ++_i594)
          {
            {
              org.apache.thrift.protocol.TList _list595 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem593 = new java.util.ArrayList<java.lang.Integer>(_list595.size);
              int _elem596;
              for (int _i597 = 0; _i597 < _list595.size; ++_i597)
              {
                _elem596 = iprot.readI32();
                _elem593.add(_elem596);
              }
            }
            struct.adminclassMixteachingclassList.add(_elem593);
          }
        }
        struct.setAdminclassMixteachingclassListIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list598 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.mixteachingclassAdminclassesList = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list598.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem599;
          for (int _i600 = 0; _i600 < _list598.size; ++_i600)
          {
            {
              org.apache.thrift.protocol.TList _list601 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem599 = new java.util.ArrayList<java.lang.Integer>(_list601.size);
              int _elem602;
              for (int _i603 = 0; _i603 < _list601.size; ++_i603)
              {
                _elem602 = iprot.readI32();
                _elem599.add(_elem602);
              }
            }
            struct.mixteachingclassAdminclassesList.add(_elem599);
          }
        }
        struct.setMixteachingclassAdminclassesListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

