/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package goclass.rpc.server.source;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-07")
public class StageFourResultOfClassStrategy implements org.apache.thrift.TBase<StageFourResultOfClassStrategy, StageFourResultOfClassStrategy._Fields>, java.io.Serializable, Cloneable, Comparable<StageFourResultOfClassStrategy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageFourResultOfClassStrategy");

  private static final org.apache.thrift.protocol.TField SUBJECT_TEACHINGCLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectTeachingclass", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_TEACHINGCLASS_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTeachingclassIndex", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("groupAdminclassIncludeTeachingIndex", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SUBJECT_DICT_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectDict", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField SUBJECT_TEACHINGCLASS_TRANSFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("subjectTeachingclassTransform", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StageFourResultOfClassStrategyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StageFourResultOfClassStrategyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> subjectTeachingclass; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> groupTeachingclassIndex; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>> groupAdminclassIncludeTeachingIndex; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> subjectDict; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> subjectTeachingclassTransform; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBJECT_TEACHINGCLASS((short)1, "subjectTeachingclass"),
    GROUP_TEACHINGCLASS_INDEX((short)2, "groupTeachingclassIndex"),
    GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX((short)3, "groupAdminclassIncludeTeachingIndex"),
    SUBJECT_DICT((short)4, "subjectDict"),
    SUBJECT_TEACHINGCLASS_TRANSFORM((short)5, "subjectTeachingclassTransform");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBJECT_TEACHINGCLASS
          return SUBJECT_TEACHINGCLASS;
        case 2: // GROUP_TEACHINGCLASS_INDEX
          return GROUP_TEACHINGCLASS_INDEX;
        case 3: // GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX
          return GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX;
        case 4: // SUBJECT_DICT
          return SUBJECT_DICT;
        case 5: // SUBJECT_TEACHINGCLASS_TRANSFORM
          return SUBJECT_TEACHINGCLASS_TRANSFORM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBJECT_TEACHINGCLASS, new org.apache.thrift.meta_data.FieldMetaData("subjectTeachingclass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))))));
    tmpMap.put(_Fields.GROUP_TEACHINGCLASS_INDEX, new org.apache.thrift.meta_data.FieldMetaData("groupTeachingclassIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    tmpMap.put(_Fields.GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX, new org.apache.thrift.meta_data.FieldMetaData("groupAdminclassIncludeTeachingIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))))));
    tmpMap.put(_Fields.SUBJECT_DICT, new org.apache.thrift.meta_data.FieldMetaData("subjectDict", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SUBJECT_TEACHINGCLASS_TRANSFORM, new org.apache.thrift.meta_data.FieldMetaData("subjectTeachingclassTransform", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32), 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageFourResultOfClassStrategy.class, metaDataMap);
  }

  public StageFourResultOfClassStrategy() {
  }

  public StageFourResultOfClassStrategy(
    java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> subjectTeachingclass,
    java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> groupTeachingclassIndex,
    java.util.List<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>> groupAdminclassIncludeTeachingIndex,
    java.util.Map<java.lang.String,java.lang.Integer> subjectDict,
    java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> subjectTeachingclassTransform)
  {
    this();
    this.subjectTeachingclass = subjectTeachingclass;
    this.groupTeachingclassIndex = groupTeachingclassIndex;
    this.groupAdminclassIncludeTeachingIndex = groupAdminclassIncludeTeachingIndex;
    this.subjectDict = subjectDict;
    this.subjectTeachingclassTransform = subjectTeachingclassTransform;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageFourResultOfClassStrategy(StageFourResultOfClassStrategy other) {
    if (other.isSetSubjectTeachingclass()) {
      java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> __this__subjectTeachingclass = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>>(other.subjectTeachingclass.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> other_element : other.subjectTeachingclass.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>> other_element_value = other_element.getValue();

        java.lang.Integer __this__subjectTeachingclass_copy_key = other_element_key;

        java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>> __this__subjectTeachingclass_copy_value = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>(other_element_value.size());
        for (java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>> other_element_value_element : other_element_value) {
          java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>> __this__subjectTeachingclass_copy_value_copy = new java.util.HashMap<java.lang.Integer,java.util.Set<java.lang.Integer>>(other_element_value_element.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.lang.Integer>> other_element_value_element_element : other_element_value_element.entrySet()) {

            java.lang.Integer other_element_value_element_element_key = other_element_value_element_element.getKey();
            java.util.Set<java.lang.Integer> other_element_value_element_element_value = other_element_value_element_element.getValue();

            java.lang.Integer __this__subjectTeachingclass_copy_value_copy_copy_key = other_element_value_element_element_key;

            java.util.Set<java.lang.Integer> __this__subjectTeachingclass_copy_value_copy_copy_value = new java.util.HashSet<java.lang.Integer>(other_element_value_element_element_value);

            __this__subjectTeachingclass_copy_value_copy.put(__this__subjectTeachingclass_copy_value_copy_copy_key, __this__subjectTeachingclass_copy_value_copy_copy_value);
          }
          __this__subjectTeachingclass_copy_value.add(__this__subjectTeachingclass_copy_value_copy);
        }

        __this__subjectTeachingclass.put(__this__subjectTeachingclass_copy_key, __this__subjectTeachingclass_copy_value);
      }
      this.subjectTeachingclass = __this__subjectTeachingclass;
    }
    if (other.isSetGroupTeachingclassIndex()) {
      java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> __this__groupTeachingclassIndex = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(other.groupTeachingclassIndex.size());
      for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> other_element : other.groupTeachingclassIndex) {
        java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> __this__groupTeachingclassIndex_copy = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> other_element_element : other_element.entrySet()) {

          java.lang.Integer other_element_element_key = other_element_element.getKey();
          java.util.List<java.lang.Integer> other_element_element_value = other_element_element.getValue();

          java.lang.Integer __this__groupTeachingclassIndex_copy_copy_key = other_element_element_key;

          java.util.List<java.lang.Integer> __this__groupTeachingclassIndex_copy_copy_value = new java.util.ArrayList<java.lang.Integer>(other_element_element_value);

          __this__groupTeachingclassIndex_copy.put(__this__groupTeachingclassIndex_copy_copy_key, __this__groupTeachingclassIndex_copy_copy_value);
        }
        __this__groupTeachingclassIndex.add(__this__groupTeachingclassIndex_copy);
      }
      this.groupTeachingclassIndex = __this__groupTeachingclassIndex;
    }
    if (other.isSetGroupAdminclassIncludeTeachingIndex()) {
      java.util.List<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>> __this__groupAdminclassIncludeTeachingIndex = new java.util.ArrayList<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>>(other.groupAdminclassIncludeTeachingIndex.size());
      for (java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> other_element : other.groupAdminclassIncludeTeachingIndex) {
        java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> __this__groupAdminclassIncludeTeachingIndex_copy = new java.util.ArrayList<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>(other_element.size());
        for (java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>> other_element_element : other_element) {
          java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>> __this__groupAdminclassIncludeTeachingIndex_copy_copy = new java.util.ArrayList<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>(other_element_element.size());
          for (java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> other_element_element_element : other_element_element) {
            java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> __this__groupAdminclassIncludeTeachingIndex_copy_copy_copy = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(other_element_element_element.size());
            for (java.util.Map<java.lang.Integer,java.lang.Integer> other_element_element_element_element : other_element_element_element) {
              java.util.Map<java.lang.Integer,java.lang.Integer> __this__groupAdminclassIncludeTeachingIndex_copy_copy_copy_copy = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(other_element_element_element_element);
              __this__groupAdminclassIncludeTeachingIndex_copy_copy_copy.add(__this__groupAdminclassIncludeTeachingIndex_copy_copy_copy_copy);
            }
            __this__groupAdminclassIncludeTeachingIndex_copy_copy.add(__this__groupAdminclassIncludeTeachingIndex_copy_copy_copy);
          }
          __this__groupAdminclassIncludeTeachingIndex_copy.add(__this__groupAdminclassIncludeTeachingIndex_copy_copy);
        }
        __this__groupAdminclassIncludeTeachingIndex.add(__this__groupAdminclassIncludeTeachingIndex_copy);
      }
      this.groupAdminclassIncludeTeachingIndex = __this__groupAdminclassIncludeTeachingIndex;
    }
    if (other.isSetSubjectDict()) {
      java.util.Map<java.lang.String,java.lang.Integer> __this__subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.subjectDict);
      this.subjectDict = __this__subjectDict;
    }
    if (other.isSetSubjectTeachingclassTransform()) {
      java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> __this__subjectTeachingclassTransform = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>>(other.subjectTeachingclassTransform.size());
      for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> other_element : other.subjectTeachingclassTransform.entrySet()) {

        java.lang.Integer other_element_key = other_element.getKey();
        java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> other_element_value = other_element.getValue();

        java.lang.Integer __this__subjectTeachingclassTransform_copy_key = other_element_key;

        java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> __this__subjectTeachingclassTransform_copy_value = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.String>>(other_element_value.size());
        for (java.util.Map<java.lang.Integer,java.lang.String> other_element_value_element : other_element_value) {
          java.util.Map<java.lang.Integer,java.lang.String> __this__subjectTeachingclassTransform_copy_value_copy = new java.util.HashMap<java.lang.Integer,java.lang.String>(other_element_value_element);
          __this__subjectTeachingclassTransform_copy_value.add(__this__subjectTeachingclassTransform_copy_value_copy);
        }

        __this__subjectTeachingclassTransform.put(__this__subjectTeachingclassTransform_copy_key, __this__subjectTeachingclassTransform_copy_value);
      }
      this.subjectTeachingclassTransform = __this__subjectTeachingclassTransform;
    }
  }

  public StageFourResultOfClassStrategy deepCopy() {
    return new StageFourResultOfClassStrategy(this);
  }

  @Override
  public void clear() {
    this.subjectTeachingclass = null;
    this.groupTeachingclassIndex = null;
    this.groupAdminclassIncludeTeachingIndex = null;
    this.subjectDict = null;
    this.subjectTeachingclassTransform = null;
  }

  public int getSubjectTeachingclassSize() {
    return (this.subjectTeachingclass == null) ? 0 : this.subjectTeachingclass.size();
  }

  public void putToSubjectTeachingclass(int key, java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>> val) {
    if (this.subjectTeachingclass == null) {
      this.subjectTeachingclass = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>>();
    }
    this.subjectTeachingclass.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> getSubjectTeachingclass() {
    return this.subjectTeachingclass;
  }

  public StageFourResultOfClassStrategy setSubjectTeachingclass(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> subjectTeachingclass) {
    this.subjectTeachingclass = subjectTeachingclass;
    return this;
  }

  public void unsetSubjectTeachingclass() {
    this.subjectTeachingclass = null;
  }

  /** Returns true if field subjectTeachingclass is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectTeachingclass() {
    return this.subjectTeachingclass != null;
  }

  public void setSubjectTeachingclassIsSet(boolean value) {
    if (!value) {
      this.subjectTeachingclass = null;
    }
  }

  public int getGroupTeachingclassIndexSize() {
    return (this.groupTeachingclassIndex == null) ? 0 : this.groupTeachingclassIndex.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> getGroupTeachingclassIndexIterator() {
    return (this.groupTeachingclassIndex == null) ? null : this.groupTeachingclassIndex.iterator();
  }

  public void addToGroupTeachingclassIndex(java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> elem) {
    if (this.groupTeachingclassIndex == null) {
      this.groupTeachingclassIndex = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>();
    }
    this.groupTeachingclassIndex.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> getGroupTeachingclassIndex() {
    return this.groupTeachingclassIndex;
  }

  public StageFourResultOfClassStrategy setGroupTeachingclassIndex(@org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>> groupTeachingclassIndex) {
    this.groupTeachingclassIndex = groupTeachingclassIndex;
    return this;
  }

  public void unsetGroupTeachingclassIndex() {
    this.groupTeachingclassIndex = null;
  }

  /** Returns true if field groupTeachingclassIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTeachingclassIndex() {
    return this.groupTeachingclassIndex != null;
  }

  public void setGroupTeachingclassIndexIsSet(boolean value) {
    if (!value) {
      this.groupTeachingclassIndex = null;
    }
  }

  public int getGroupAdminclassIncludeTeachingIndexSize() {
    return (this.groupAdminclassIncludeTeachingIndex == null) ? 0 : this.groupAdminclassIncludeTeachingIndex.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>> getGroupAdminclassIncludeTeachingIndexIterator() {
    return (this.groupAdminclassIncludeTeachingIndex == null) ? null : this.groupAdminclassIncludeTeachingIndex.iterator();
  }

  public void addToGroupAdminclassIncludeTeachingIndex(java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> elem) {
    if (this.groupAdminclassIncludeTeachingIndex == null) {
      this.groupAdminclassIncludeTeachingIndex = new java.util.ArrayList<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>>();
    }
    this.groupAdminclassIncludeTeachingIndex.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>> getGroupAdminclassIncludeTeachingIndex() {
    return this.groupAdminclassIncludeTeachingIndex;
  }

  public StageFourResultOfClassStrategy setGroupAdminclassIncludeTeachingIndex(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>> groupAdminclassIncludeTeachingIndex) {
    this.groupAdminclassIncludeTeachingIndex = groupAdminclassIncludeTeachingIndex;
    return this;
  }

  public void unsetGroupAdminclassIncludeTeachingIndex() {
    this.groupAdminclassIncludeTeachingIndex = null;
  }

  /** Returns true if field groupAdminclassIncludeTeachingIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupAdminclassIncludeTeachingIndex() {
    return this.groupAdminclassIncludeTeachingIndex != null;
  }

  public void setGroupAdminclassIncludeTeachingIndexIsSet(boolean value) {
    if (!value) {
      this.groupAdminclassIncludeTeachingIndex = null;
    }
  }

  public int getSubjectDictSize() {
    return (this.subjectDict == null) ? 0 : this.subjectDict.size();
  }

  public void putToSubjectDict(java.lang.String key, int val) {
    if (this.subjectDict == null) {
      this.subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>();
    }
    this.subjectDict.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.Integer> getSubjectDict() {
    return this.subjectDict;
  }

  public StageFourResultOfClassStrategy setSubjectDict(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.Integer> subjectDict) {
    this.subjectDict = subjectDict;
    return this;
  }

  public void unsetSubjectDict() {
    this.subjectDict = null;
  }

  /** Returns true if field subjectDict is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectDict() {
    return this.subjectDict != null;
  }

  public void setSubjectDictIsSet(boolean value) {
    if (!value) {
      this.subjectDict = null;
    }
  }

  public int getSubjectTeachingclassTransformSize() {
    return (this.subjectTeachingclassTransform == null) ? 0 : this.subjectTeachingclassTransform.size();
  }

  public void putToSubjectTeachingclassTransform(int key, java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> val) {
    if (this.subjectTeachingclassTransform == null) {
      this.subjectTeachingclassTransform = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>>();
    }
    this.subjectTeachingclassTransform.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> getSubjectTeachingclassTransform() {
    return this.subjectTeachingclassTransform;
  }

  public StageFourResultOfClassStrategy setSubjectTeachingclassTransform(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> subjectTeachingclassTransform) {
    this.subjectTeachingclassTransform = subjectTeachingclassTransform;
    return this;
  }

  public void unsetSubjectTeachingclassTransform() {
    this.subjectTeachingclassTransform = null;
  }

  /** Returns true if field subjectTeachingclassTransform is set (has been assigned a value) and false otherwise */
  public boolean isSetSubjectTeachingclassTransform() {
    return this.subjectTeachingclassTransform != null;
  }

  public void setSubjectTeachingclassTransformIsSet(boolean value) {
    if (!value) {
      this.subjectTeachingclassTransform = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUBJECT_TEACHINGCLASS:
      if (value == null) {
        unsetSubjectTeachingclass();
      } else {
        setSubjectTeachingclass((java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>>)value);
      }
      break;

    case GROUP_TEACHINGCLASS_INDEX:
      if (value == null) {
        unsetGroupTeachingclassIndex();
      } else {
        setGroupTeachingclassIndex((java.util.List<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>)value);
      }
      break;

    case GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX:
      if (value == null) {
        unsetGroupAdminclassIncludeTeachingIndex();
      } else {
        setGroupAdminclassIncludeTeachingIndex((java.util.List<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>>)value);
      }
      break;

    case SUBJECT_DICT:
      if (value == null) {
        unsetSubjectDict();
      } else {
        setSubjectDict((java.util.Map<java.lang.String,java.lang.Integer>)value);
      }
      break;

    case SUBJECT_TEACHINGCLASS_TRANSFORM:
      if (value == null) {
        unsetSubjectTeachingclassTransform();
      } else {
        setSubjectTeachingclassTransform((java.util.Map<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBJECT_TEACHINGCLASS:
      return getSubjectTeachingclass();

    case GROUP_TEACHINGCLASS_INDEX:
      return getGroupTeachingclassIndex();

    case GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX:
      return getGroupAdminclassIncludeTeachingIndex();

    case SUBJECT_DICT:
      return getSubjectDict();

    case SUBJECT_TEACHINGCLASS_TRANSFORM:
      return getSubjectTeachingclassTransform();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUBJECT_TEACHINGCLASS:
      return isSetSubjectTeachingclass();
    case GROUP_TEACHINGCLASS_INDEX:
      return isSetGroupTeachingclassIndex();
    case GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX:
      return isSetGroupAdminclassIncludeTeachingIndex();
    case SUBJECT_DICT:
      return isSetSubjectDict();
    case SUBJECT_TEACHINGCLASS_TRANSFORM:
      return isSetSubjectTeachingclassTransform();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StageFourResultOfClassStrategy)
      return this.equals((StageFourResultOfClassStrategy)that);
    return false;
  }

  public boolean equals(StageFourResultOfClassStrategy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subjectTeachingclass = true && this.isSetSubjectTeachingclass();
    boolean that_present_subjectTeachingclass = true && that.isSetSubjectTeachingclass();
    if (this_present_subjectTeachingclass || that_present_subjectTeachingclass) {
      if (!(this_present_subjectTeachingclass && that_present_subjectTeachingclass))
        return false;
      if (!this.subjectTeachingclass.equals(that.subjectTeachingclass))
        return false;
    }

    boolean this_present_groupTeachingclassIndex = true && this.isSetGroupTeachingclassIndex();
    boolean that_present_groupTeachingclassIndex = true && that.isSetGroupTeachingclassIndex();
    if (this_present_groupTeachingclassIndex || that_present_groupTeachingclassIndex) {
      if (!(this_present_groupTeachingclassIndex && that_present_groupTeachingclassIndex))
        return false;
      if (!this.groupTeachingclassIndex.equals(that.groupTeachingclassIndex))
        return false;
    }

    boolean this_present_groupAdminclassIncludeTeachingIndex = true && this.isSetGroupAdminclassIncludeTeachingIndex();
    boolean that_present_groupAdminclassIncludeTeachingIndex = true && that.isSetGroupAdminclassIncludeTeachingIndex();
    if (this_present_groupAdminclassIncludeTeachingIndex || that_present_groupAdminclassIncludeTeachingIndex) {
      if (!(this_present_groupAdminclassIncludeTeachingIndex && that_present_groupAdminclassIncludeTeachingIndex))
        return false;
      if (!this.groupAdminclassIncludeTeachingIndex.equals(that.groupAdminclassIncludeTeachingIndex))
        return false;
    }

    boolean this_present_subjectDict = true && this.isSetSubjectDict();
    boolean that_present_subjectDict = true && that.isSetSubjectDict();
    if (this_present_subjectDict || that_present_subjectDict) {
      if (!(this_present_subjectDict && that_present_subjectDict))
        return false;
      if (!this.subjectDict.equals(that.subjectDict))
        return false;
    }

    boolean this_present_subjectTeachingclassTransform = true && this.isSetSubjectTeachingclassTransform();
    boolean that_present_subjectTeachingclassTransform = true && that.isSetSubjectTeachingclassTransform();
    if (this_present_subjectTeachingclassTransform || that_present_subjectTeachingclassTransform) {
      if (!(this_present_subjectTeachingclassTransform && that_present_subjectTeachingclassTransform))
        return false;
      if (!this.subjectTeachingclassTransform.equals(that.subjectTeachingclassTransform))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSubjectTeachingclass()) ? 131071 : 524287);
    if (isSetSubjectTeachingclass())
      hashCode = hashCode * 8191 + subjectTeachingclass.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroupTeachingclassIndex()) ? 131071 : 524287);
    if (isSetGroupTeachingclassIndex())
      hashCode = hashCode * 8191 + groupTeachingclassIndex.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroupAdminclassIncludeTeachingIndex()) ? 131071 : 524287);
    if (isSetGroupAdminclassIncludeTeachingIndex())
      hashCode = hashCode * 8191 + groupAdminclassIncludeTeachingIndex.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubjectDict()) ? 131071 : 524287);
    if (isSetSubjectDict())
      hashCode = hashCode * 8191 + subjectDict.hashCode();

    hashCode = hashCode * 8191 + ((isSetSubjectTeachingclassTransform()) ? 131071 : 524287);
    if (isSetSubjectTeachingclassTransform())
      hashCode = hashCode * 8191 + subjectTeachingclassTransform.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StageFourResultOfClassStrategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSubjectTeachingclass()).compareTo(other.isSetSubjectTeachingclass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectTeachingclass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectTeachingclass, other.subjectTeachingclass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupTeachingclassIndex()).compareTo(other.isSetGroupTeachingclassIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTeachingclassIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTeachingclassIndex, other.groupTeachingclassIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroupAdminclassIncludeTeachingIndex()).compareTo(other.isSetGroupAdminclassIncludeTeachingIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupAdminclassIncludeTeachingIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupAdminclassIncludeTeachingIndex, other.groupAdminclassIncludeTeachingIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubjectDict()).compareTo(other.isSetSubjectDict());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectDict()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectDict, other.subjectDict);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSubjectTeachingclassTransform()).compareTo(other.isSetSubjectTeachingclassTransform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubjectTeachingclassTransform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subjectTeachingclassTransform, other.subjectTeachingclassTransform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StageFourResultOfClassStrategy(");
    boolean first = true;

    sb.append("subjectTeachingclass:");
    if (this.subjectTeachingclass == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectTeachingclass);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupTeachingclassIndex:");
    if (this.groupTeachingclassIndex == null) {
      sb.append("null");
    } else {
      sb.append(this.groupTeachingclassIndex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupAdminclassIncludeTeachingIndex:");
    if (this.groupAdminclassIncludeTeachingIndex == null) {
      sb.append("null");
    } else {
      sb.append(this.groupAdminclassIncludeTeachingIndex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectDict:");
    if (this.subjectDict == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectDict);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subjectTeachingclassTransform:");
    if (this.subjectTeachingclassTransform == null) {
      sb.append("null");
    } else {
      sb.append(this.subjectTeachingclassTransform);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageFourResultOfClassStrategyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageFourResultOfClassStrategyStandardScheme getScheme() {
      return new StageFourResultOfClassStrategyStandardScheme();
    }
  }

  private static class StageFourResultOfClassStrategyStandardScheme extends org.apache.thrift.scheme.StandardScheme<StageFourResultOfClassStrategy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageFourResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBJECT_TEACHINGCLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map334 = iprot.readMapBegin();
                struct.subjectTeachingclass = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>>(2*_map334.size);
                int _key335;
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>> _val336;
                for (int _i337 = 0; _i337 < _map334.size; ++_i337)
                {
                  _key335 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list338 = iprot.readListBegin();
                    _val336 = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>(_list338.size);
                    @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>> _elem339;
                    for (int _i340 = 0; _i340 < _list338.size; ++_i340)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map341 = iprot.readMapBegin();
                        _elem339 = new java.util.HashMap<java.lang.Integer,java.util.Set<java.lang.Integer>>(2*_map341.size);
                        int _key342;
                        @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _val343;
                        for (int _i344 = 0; _i344 < _map341.size; ++_i344)
                        {
                          _key342 = iprot.readI32();
                          {
                            org.apache.thrift.protocol.TSet _set345 = iprot.readSetBegin();
                            _val343 = new java.util.HashSet<java.lang.Integer>(2*_set345.size);
                            int _elem346;
                            for (int _i347 = 0; _i347 < _set345.size; ++_i347)
                            {
                              _elem346 = iprot.readI32();
                              _val343.add(_elem346);
                            }
                            iprot.readSetEnd();
                          }
                          _elem339.put(_key342, _val343);
                        }
                        iprot.readMapEnd();
                      }
                      _val336.add(_elem339);
                    }
                    iprot.readListEnd();
                  }
                  struct.subjectTeachingclass.put(_key335, _val336);
                }
                iprot.readMapEnd();
              }
              struct.setSubjectTeachingclassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_TEACHINGCLASS_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list348 = iprot.readListBegin();
                struct.groupTeachingclassIndex = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(_list348.size);
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _elem349;
                for (int _i350 = 0; _i350 < _list348.size; ++_i350)
                {
                  {
                    org.apache.thrift.protocol.TMap _map351 = iprot.readMapBegin();
                    _elem349 = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map351.size);
                    int _key352;
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val353;
                    for (int _i354 = 0; _i354 < _map351.size; ++_i354)
                    {
                      _key352 = iprot.readI32();
                      {
                        org.apache.thrift.protocol.TList _list355 = iprot.readListBegin();
                        _val353 = new java.util.ArrayList<java.lang.Integer>(_list355.size);
                        int _elem356;
                        for (int _i357 = 0; _i357 < _list355.size; ++_i357)
                        {
                          _elem356 = iprot.readI32();
                          _val353.add(_elem356);
                        }
                        iprot.readListEnd();
                      }
                      _elem349.put(_key352, _val353);
                    }
                    iprot.readMapEnd();
                  }
                  struct.groupTeachingclassIndex.add(_elem349);
                }
                iprot.readListEnd();
              }
              struct.setGroupTeachingclassIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list358 = iprot.readListBegin();
                struct.groupAdminclassIncludeTeachingIndex = new java.util.ArrayList<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>>(_list358.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> _elem359;
                for (int _i360 = 0; _i360 < _list358.size; ++_i360)
                {
                  {
                    org.apache.thrift.protocol.TList _list361 = iprot.readListBegin();
                    _elem359 = new java.util.ArrayList<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>(_list361.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>> _elem362;
                    for (int _i363 = 0; _i363 < _list361.size; ++_i363)
                    {
                      {
                        org.apache.thrift.protocol.TList _list364 = iprot.readListBegin();
                        _elem362 = new java.util.ArrayList<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>(_list364.size);
                        @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> _elem365;
                        for (int _i366 = 0; _i366 < _list364.size; ++_i366)
                        {
                          {
                            org.apache.thrift.protocol.TList _list367 = iprot.readListBegin();
                            _elem365 = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list367.size);
                            @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> _elem368;
                            for (int _i369 = 0; _i369 < _list367.size; ++_i369)
                            {
                              {
                                org.apache.thrift.protocol.TMap _map370 = iprot.readMapBegin();
                                _elem368 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map370.size);
                                int _key371;
                                int _val372;
                                for (int _i373 = 0; _i373 < _map370.size; ++_i373)
                                {
                                  _key371 = iprot.readI32();
                                  _val372 = iprot.readI32();
                                  _elem368.put(_key371, _val372);
                                }
                                iprot.readMapEnd();
                              }
                              _elem365.add(_elem368);
                            }
                            iprot.readListEnd();
                          }
                          _elem362.add(_elem365);
                        }
                        iprot.readListEnd();
                      }
                      _elem359.add(_elem362);
                    }
                    iprot.readListEnd();
                  }
                  struct.groupAdminclassIncludeTeachingIndex.add(_elem359);
                }
                iprot.readListEnd();
              }
              struct.setGroupAdminclassIncludeTeachingIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUBJECT_DICT
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map374 = iprot.readMapBegin();
                struct.subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map374.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key375;
                int _val376;
                for (int _i377 = 0; _i377 < _map374.size; ++_i377)
                {
                  _key375 = iprot.readString();
                  _val376 = iprot.readI32();
                  struct.subjectDict.put(_key375, _val376);
                }
                iprot.readMapEnd();
              }
              struct.setSubjectDictIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBJECT_TEACHINGCLASS_TRANSFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map378 = iprot.readMapBegin();
                struct.subjectTeachingclassTransform = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>>(2*_map378.size);
                int _key379;
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> _val380;
                for (int _i381 = 0; _i381 < _map378.size; ++_i381)
                {
                  _key379 = iprot.readI32();
                  {
                    org.apache.thrift.protocol.TList _list382 = iprot.readListBegin();
                    _val380 = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.String>>(_list382.size);
                    @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> _elem383;
                    for (int _i384 = 0; _i384 < _list382.size; ++_i384)
                    {
                      {
                        org.apache.thrift.protocol.TMap _map385 = iprot.readMapBegin();
                        _elem383 = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map385.size);
                        int _key386;
                        @org.apache.thrift.annotation.Nullable java.lang.String _val387;
                        for (int _i388 = 0; _i388 < _map385.size; ++_i388)
                        {
                          _key386 = iprot.readI32();
                          _val387 = iprot.readString();
                          _elem383.put(_key386, _val387);
                        }
                        iprot.readMapEnd();
                      }
                      _val380.add(_elem383);
                    }
                    iprot.readListEnd();
                  }
                  struct.subjectTeachingclassTransform.put(_key379, _val380);
                }
                iprot.readMapEnd();
              }
              struct.setSubjectTeachingclassTransformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageFourResultOfClassStrategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subjectTeachingclass != null) {
        oprot.writeFieldBegin(SUBJECT_TEACHINGCLASS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.subjectTeachingclass.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> _iter389 : struct.subjectTeachingclass.entrySet())
          {
            oprot.writeI32(_iter389.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter389.getValue().size()));
              for (java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>> _iter390 : _iter389.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, _iter390.size()));
                  for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.lang.Integer>> _iter391 : _iter390.entrySet())
                  {
                    oprot.writeI32(_iter391.getKey());
                    {
                      oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, _iter391.getValue().size()));
                      for (int _iter392 : _iter391.getValue())
                      {
                        oprot.writeI32(_iter392);
                      }
                      oprot.writeSetEnd();
                    }
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupTeachingclassIndex != null) {
        oprot.writeFieldBegin(GROUP_TEACHINGCLASS_INDEX_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.groupTeachingclassIndex.size()));
          for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _iter393 : struct.groupTeachingclassIndex)
          {
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, _iter393.size()));
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter394 : _iter393.entrySet())
              {
                oprot.writeI32(_iter394.getKey());
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter394.getValue().size()));
                  for (int _iter395 : _iter394.getValue())
                  {
                    oprot.writeI32(_iter395);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.groupAdminclassIncludeTeachingIndex != null) {
        oprot.writeFieldBegin(GROUP_ADMINCLASS_INCLUDE_TEACHING_INDEX_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.groupAdminclassIncludeTeachingIndex.size()));
          for (java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> _iter396 : struct.groupAdminclassIncludeTeachingIndex)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter396.size()));
              for (java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>> _iter397 : _iter396)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter397.size()));
                  for (java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> _iter398 : _iter397)
                  {
                    {
                      oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter398.size()));
                      for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter399 : _iter398)
                      {
                        {
                          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, _iter399.size()));
                          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter400 : _iter399.entrySet())
                          {
                            oprot.writeI32(_iter400.getKey());
                            oprot.writeI32(_iter400.getValue());
                          }
                          oprot.writeMapEnd();
                        }
                      }
                      oprot.writeListEnd();
                    }
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subjectDict != null) {
        oprot.writeFieldBegin(SUBJECT_DICT_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.subjectDict.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter401 : struct.subjectDict.entrySet())
          {
            oprot.writeString(_iter401.getKey());
            oprot.writeI32(_iter401.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.subjectTeachingclassTransform != null) {
        oprot.writeFieldBegin(SUBJECT_TEACHINGCLASS_TRANSFORM_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, struct.subjectTeachingclassTransform.size()));
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> _iter402 : struct.subjectTeachingclassTransform.entrySet())
          {
            oprot.writeI32(_iter402.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, _iter402.getValue().size()));
              for (java.util.Map<java.lang.Integer,java.lang.String> _iter403 : _iter402.getValue())
              {
                {
                  oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, _iter403.size()));
                  for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter404 : _iter403.entrySet())
                  {
                    oprot.writeI32(_iter404.getKey());
                    oprot.writeString(_iter404.getValue());
                  }
                  oprot.writeMapEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageFourResultOfClassStrategyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageFourResultOfClassStrategyTupleScheme getScheme() {
      return new StageFourResultOfClassStrategyTupleScheme();
    }
  }

  private static class StageFourResultOfClassStrategyTupleScheme extends org.apache.thrift.scheme.TupleScheme<StageFourResultOfClassStrategy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageFourResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSubjectTeachingclass()) {
        optionals.set(0);
      }
      if (struct.isSetGroupTeachingclassIndex()) {
        optionals.set(1);
      }
      if (struct.isSetGroupAdminclassIncludeTeachingIndex()) {
        optionals.set(2);
      }
      if (struct.isSetSubjectDict()) {
        optionals.set(3);
      }
      if (struct.isSetSubjectTeachingclassTransform()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSubjectTeachingclass()) {
        {
          oprot.writeI32(struct.subjectTeachingclass.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>> _iter405 : struct.subjectTeachingclass.entrySet())
          {
            oprot.writeI32(_iter405.getKey());
            {
              oprot.writeI32(_iter405.getValue().size());
              for (java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>> _iter406 : _iter405.getValue())
              {
                {
                  oprot.writeI32(_iter406.size());
                  for (java.util.Map.Entry<java.lang.Integer, java.util.Set<java.lang.Integer>> _iter407 : _iter406.entrySet())
                  {
                    oprot.writeI32(_iter407.getKey());
                    {
                      oprot.writeI32(_iter407.getValue().size());
                      for (int _iter408 : _iter407.getValue())
                      {
                        oprot.writeI32(_iter408);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetGroupTeachingclassIndex()) {
        {
          oprot.writeI32(struct.groupTeachingclassIndex.size());
          for (java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _iter409 : struct.groupTeachingclassIndex)
          {
            {
              oprot.writeI32(_iter409.size());
              for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.lang.Integer>> _iter410 : _iter409.entrySet())
              {
                oprot.writeI32(_iter410.getKey());
                {
                  oprot.writeI32(_iter410.getValue().size());
                  for (int _iter411 : _iter410.getValue())
                  {
                    oprot.writeI32(_iter411);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetGroupAdminclassIncludeTeachingIndex()) {
        {
          oprot.writeI32(struct.groupAdminclassIncludeTeachingIndex.size());
          for (java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> _iter412 : struct.groupAdminclassIncludeTeachingIndex)
          {
            {
              oprot.writeI32(_iter412.size());
              for (java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>> _iter413 : _iter412)
              {
                {
                  oprot.writeI32(_iter413.size());
                  for (java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> _iter414 : _iter413)
                  {
                    {
                      oprot.writeI32(_iter414.size());
                      for (java.util.Map<java.lang.Integer,java.lang.Integer> _iter415 : _iter414)
                      {
                        {
                          oprot.writeI32(_iter415.size());
                          for (java.util.Map.Entry<java.lang.Integer, java.lang.Integer> _iter416 : _iter415.entrySet())
                          {
                            oprot.writeI32(_iter416.getKey());
                            oprot.writeI32(_iter416.getValue());
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetSubjectDict()) {
        {
          oprot.writeI32(struct.subjectDict.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter417 : struct.subjectDict.entrySet())
          {
            oprot.writeString(_iter417.getKey());
            oprot.writeI32(_iter417.getValue());
          }
        }
      }
      if (struct.isSetSubjectTeachingclassTransform()) {
        {
          oprot.writeI32(struct.subjectTeachingclassTransform.size());
          for (java.util.Map.Entry<java.lang.Integer, java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>> _iter418 : struct.subjectTeachingclassTransform.entrySet())
          {
            oprot.writeI32(_iter418.getKey());
            {
              oprot.writeI32(_iter418.getValue().size());
              for (java.util.Map<java.lang.Integer,java.lang.String> _iter419 : _iter418.getValue())
              {
                {
                  oprot.writeI32(_iter419.size());
                  for (java.util.Map.Entry<java.lang.Integer, java.lang.String> _iter420 : _iter419.entrySet())
                  {
                    oprot.writeI32(_iter420.getKey());
                    oprot.writeString(_iter420.getValue());
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageFourResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map421 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.subjectTeachingclass = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>>(2*_map421.size);
          int _key422;
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>> _val423;
          for (int _i424 = 0; _i424 < _map421.size; ++_i424)
          {
            _key422 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list425 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val423 = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>>>(_list425.size);
              @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.Set<java.lang.Integer>> _elem426;
              for (int _i427 = 0; _i427 < _list425.size; ++_i427)
              {
                {
                  org.apache.thrift.protocol.TMap _map428 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.SET, iprot.readI32());
                  _elem426 = new java.util.HashMap<java.lang.Integer,java.util.Set<java.lang.Integer>>(2*_map428.size);
                  int _key429;
                  @org.apache.thrift.annotation.Nullable java.util.Set<java.lang.Integer> _val430;
                  for (int _i431 = 0; _i431 < _map428.size; ++_i431)
                  {
                    _key429 = iprot.readI32();
                    {
                      org.apache.thrift.protocol.TSet _set432 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                      _val430 = new java.util.HashSet<java.lang.Integer>(2*_set432.size);
                      int _elem433;
                      for (int _i434 = 0; _i434 < _set432.size; ++_i434)
                      {
                        _elem433 = iprot.readI32();
                        _val430.add(_elem433);
                      }
                    }
                    _elem426.put(_key429, _val430);
                  }
                }
                _val423.add(_elem426);
              }
            }
            struct.subjectTeachingclass.put(_key422, _val423);
          }
        }
        struct.setSubjectTeachingclassIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list435 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.groupTeachingclassIndex = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>>>(_list435.size);
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.util.List<java.lang.Integer>> _elem436;
          for (int _i437 = 0; _i437 < _list435.size; ++_i437)
          {
            {
              org.apache.thrift.protocol.TMap _map438 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem436 = new java.util.HashMap<java.lang.Integer,java.util.List<java.lang.Integer>>(2*_map438.size);
              int _key439;
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _val440;
              for (int _i441 = 0; _i441 < _map438.size; ++_i441)
              {
                _key439 = iprot.readI32();
                {
                  org.apache.thrift.protocol.TList _list442 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _val440 = new java.util.ArrayList<java.lang.Integer>(_list442.size);
                  int _elem443;
                  for (int _i444 = 0; _i444 < _list442.size; ++_i444)
                  {
                    _elem443 = iprot.readI32();
                    _val440.add(_elem443);
                  }
                }
                _elem436.put(_key439, _val440);
              }
            }
            struct.groupTeachingclassIndex.add(_elem436);
          }
        }
        struct.setGroupTeachingclassIndexIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list445 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.groupAdminclassIncludeTeachingIndex = new java.util.ArrayList<java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>>(_list445.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>> _elem446;
          for (int _i447 = 0; _i447 < _list445.size; ++_i447)
          {
            {
              org.apache.thrift.protocol.TList _list448 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem446 = new java.util.ArrayList<java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>>(_list448.size);
              @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>> _elem449;
              for (int _i450 = 0; _i450 < _list448.size; ++_i450)
              {
                {
                  org.apache.thrift.protocol.TList _list451 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
                  _elem449 = new java.util.ArrayList<java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>>>(_list451.size);
                  @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.Integer>> _elem452;
                  for (int _i453 = 0; _i453 < _list451.size; ++_i453)
                  {
                    {
                      org.apache.thrift.protocol.TList _list454 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
                      _elem452 = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.Integer>>(_list454.size);
                      @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.Integer> _elem455;
                      for (int _i456 = 0; _i456 < _list454.size; ++_i456)
                      {
                        {
                          org.apache.thrift.protocol.TMap _map457 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.I32, iprot.readI32());
                          _elem455 = new java.util.HashMap<java.lang.Integer,java.lang.Integer>(2*_map457.size);
                          int _key458;
                          int _val459;
                          for (int _i460 = 0; _i460 < _map457.size; ++_i460)
                          {
                            _key458 = iprot.readI32();
                            _val459 = iprot.readI32();
                            _elem455.put(_key458, _val459);
                          }
                        }
                        _elem452.add(_elem455);
                      }
                    }
                    _elem449.add(_elem452);
                  }
                }
                _elem446.add(_elem449);
              }
            }
            struct.groupAdminclassIncludeTeachingIndex.add(_elem446);
          }
        }
        struct.setGroupAdminclassIncludeTeachingIndexIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map461 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.subjectDict = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map461.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key462;
          int _val463;
          for (int _i464 = 0; _i464 < _map461.size; ++_i464)
          {
            _key462 = iprot.readString();
            _val463 = iprot.readI32();
            struct.subjectDict.put(_key462, _val463);
          }
        }
        struct.setSubjectDictIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map465 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.subjectTeachingclassTransform = new java.util.HashMap<java.lang.Integer,java.util.List<java.util.Map<java.lang.Integer,java.lang.String>>>(2*_map465.size);
          int _key466;
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.Map<java.lang.Integer,java.lang.String>> _val467;
          for (int _i468 = 0; _i468 < _map465.size; ++_i468)
          {
            _key466 = iprot.readI32();
            {
              org.apache.thrift.protocol.TList _list469 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
              _val467 = new java.util.ArrayList<java.util.Map<java.lang.Integer,java.lang.String>>(_list469.size);
              @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.Integer,java.lang.String> _elem470;
              for (int _i471 = 0; _i471 < _list469.size; ++_i471)
              {
                {
                  org.apache.thrift.protocol.TMap _map472 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                  _elem470 = new java.util.HashMap<java.lang.Integer,java.lang.String>(2*_map472.size);
                  int _key473;
                  @org.apache.thrift.annotation.Nullable java.lang.String _val474;
                  for (int _i475 = 0; _i475 < _map472.size; ++_i475)
                  {
                    _key473 = iprot.readI32();
                    _val474 = iprot.readString();
                    _elem470.put(_key473, _val474);
                  }
                }
                _val467.add(_elem470);
              }
            }
            struct.subjectTeachingclassTransform.put(_key466, _val467);
          }
        }
        struct.setSubjectTeachingclassTransformIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

