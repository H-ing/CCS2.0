/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package goclass.rpc.server.source;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-07")
public class StageOneResultOfClassStrategy implements org.apache.thrift.TBase<StageOneResultOfClassStrategy, StageOneResultOfClassStrategy._Fields>, java.io.Serializable, Cloneable, Comparable<StageOneResultOfClassStrategy> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageOneResultOfClassStrategy");

  private static final org.apache.thrift.protocol.TField WALKINGCLASS_COMBINATION_SOLUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("walkingclassCombinationSolution", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField WALKINGCLASS_COMBINATION_SELECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("walkingclassCombinationSelection", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER_FIELD_DESC = new org.apache.thrift.protocol.TField("walkingclassCombinationStudentAverageNumner", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField WALKINGCLASS_COMBINATION_CLASS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("walkingclassCombinationClassNumber", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_CLASS_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("minClassNumber", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField WALKINGCLASS_SUBJECT_FIELD_DESC = new org.apache.thrift.protocol.TField("walkingclassSubject", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StageOneResultOfClassStrategyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StageOneResultOfClassStrategyTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> walkingclassCombinationSolution; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> walkingclassCombinationSelection; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> walkingclassCombinationStudentAverageNumner; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> walkingclassCombinationClassNumber; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> minClassNumber; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> walkingclassSubject; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WALKINGCLASS_COMBINATION_SOLUTION((short)1, "walkingclassCombinationSolution"),
    WALKINGCLASS_COMBINATION_SELECTION((short)2, "walkingclassCombinationSelection"),
    WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER((short)3, "walkingclassCombinationStudentAverageNumner"),
    WALKINGCLASS_COMBINATION_CLASS_NUMBER((short)4, "walkingclassCombinationClassNumber"),
    MIN_CLASS_NUMBER((short)5, "minClassNumber"),
    WALKINGCLASS_SUBJECT((short)6, "walkingclassSubject");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WALKINGCLASS_COMBINATION_SOLUTION
          return WALKINGCLASS_COMBINATION_SOLUTION;
        case 2: // WALKINGCLASS_COMBINATION_SELECTION
          return WALKINGCLASS_COMBINATION_SELECTION;
        case 3: // WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER
          return WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER;
        case 4: // WALKINGCLASS_COMBINATION_CLASS_NUMBER
          return WALKINGCLASS_COMBINATION_CLASS_NUMBER;
        case 5: // MIN_CLASS_NUMBER
          return MIN_CLASS_NUMBER;
        case 6: // WALKINGCLASS_SUBJECT
          return WALKINGCLASS_SUBJECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WALKINGCLASS_COMBINATION_SOLUTION, new org.apache.thrift.meta_data.FieldMetaData("walkingclassCombinationSolution", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    tmpMap.put(_Fields.WALKINGCLASS_COMBINATION_SELECTION, new org.apache.thrift.meta_data.FieldMetaData("walkingclassCombinationSelection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    tmpMap.put(_Fields.WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER, new org.apache.thrift.meta_data.FieldMetaData("walkingclassCombinationStudentAverageNumner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    tmpMap.put(_Fields.WALKINGCLASS_COMBINATION_CLASS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("walkingclassCombinationClassNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.MIN_CLASS_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("minClassNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.WALKINGCLASS_SUBJECT, new org.apache.thrift.meta_data.FieldMetaData("walkingclassSubject", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageOneResultOfClassStrategy.class, metaDataMap);
  }

  public StageOneResultOfClassStrategy() {
  }

  public StageOneResultOfClassStrategy(
    java.util.List<java.util.List<java.util.List<java.lang.Integer>>> walkingclassCombinationSolution,
    java.util.List<java.util.List<java.util.List<java.lang.Integer>>> walkingclassCombinationSelection,
    java.util.List<java.util.List<java.lang.Double>> walkingclassCombinationStudentAverageNumner,
    java.util.List<java.util.List<java.lang.Integer>> walkingclassCombinationClassNumber,
    java.util.List<java.lang.Integer> minClassNumber,
    java.util.List<java.lang.Integer> walkingclassSubject)
  {
    this();
    this.walkingclassCombinationSolution = walkingclassCombinationSolution;
    this.walkingclassCombinationSelection = walkingclassCombinationSelection;
    this.walkingclassCombinationStudentAverageNumner = walkingclassCombinationStudentAverageNumner;
    this.walkingclassCombinationClassNumber = walkingclassCombinationClassNumber;
    this.minClassNumber = minClassNumber;
    this.walkingclassSubject = walkingclassSubject;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageOneResultOfClassStrategy(StageOneResultOfClassStrategy other) {
    if (other.isSetWalkingclassCombinationSolution()) {
      java.util.List<java.util.List<java.util.List<java.lang.Integer>>> __this__walkingclassCombinationSolution = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(other.walkingclassCombinationSolution.size());
      for (java.util.List<java.util.List<java.lang.Integer>> other_element : other.walkingclassCombinationSolution) {
        java.util.List<java.util.List<java.lang.Integer>> __this__walkingclassCombinationSolution_copy = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.List<java.lang.Integer> other_element_element : other_element) {
          java.util.List<java.lang.Integer> __this__walkingclassCombinationSolution_copy_copy = new java.util.ArrayList<java.lang.Integer>(other_element_element);
          __this__walkingclassCombinationSolution_copy.add(__this__walkingclassCombinationSolution_copy_copy);
        }
        __this__walkingclassCombinationSolution.add(__this__walkingclassCombinationSolution_copy);
      }
      this.walkingclassCombinationSolution = __this__walkingclassCombinationSolution;
    }
    if (other.isSetWalkingclassCombinationSelection()) {
      java.util.List<java.util.List<java.util.List<java.lang.Integer>>> __this__walkingclassCombinationSelection = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(other.walkingclassCombinationSelection.size());
      for (java.util.List<java.util.List<java.lang.Integer>> other_element : other.walkingclassCombinationSelection) {
        java.util.List<java.util.List<java.lang.Integer>> __this__walkingclassCombinationSelection_copy = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.List<java.lang.Integer> other_element_element : other_element) {
          java.util.List<java.lang.Integer> __this__walkingclassCombinationSelection_copy_copy = new java.util.ArrayList<java.lang.Integer>(other_element_element);
          __this__walkingclassCombinationSelection_copy.add(__this__walkingclassCombinationSelection_copy_copy);
        }
        __this__walkingclassCombinationSelection.add(__this__walkingclassCombinationSelection_copy);
      }
      this.walkingclassCombinationSelection = __this__walkingclassCombinationSelection;
    }
    if (other.isSetWalkingclassCombinationStudentAverageNumner()) {
      java.util.List<java.util.List<java.lang.Double>> __this__walkingclassCombinationStudentAverageNumner = new java.util.ArrayList<java.util.List<java.lang.Double>>(other.walkingclassCombinationStudentAverageNumner.size());
      for (java.util.List<java.lang.Double> other_element : other.walkingclassCombinationStudentAverageNumner) {
        java.util.List<java.lang.Double> __this__walkingclassCombinationStudentAverageNumner_copy = new java.util.ArrayList<java.lang.Double>(other_element);
        __this__walkingclassCombinationStudentAverageNumner.add(__this__walkingclassCombinationStudentAverageNumner_copy);
      }
      this.walkingclassCombinationStudentAverageNumner = __this__walkingclassCombinationStudentAverageNumner;
    }
    if (other.isSetWalkingclassCombinationClassNumber()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__walkingclassCombinationClassNumber = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.walkingclassCombinationClassNumber.size());
      for (java.util.List<java.lang.Integer> other_element : other.walkingclassCombinationClassNumber) {
        java.util.List<java.lang.Integer> __this__walkingclassCombinationClassNumber_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__walkingclassCombinationClassNumber.add(__this__walkingclassCombinationClassNumber_copy);
      }
      this.walkingclassCombinationClassNumber = __this__walkingclassCombinationClassNumber;
    }
    if (other.isSetMinClassNumber()) {
      java.util.List<java.lang.Integer> __this__minClassNumber = new java.util.ArrayList<java.lang.Integer>(other.minClassNumber);
      this.minClassNumber = __this__minClassNumber;
    }
    if (other.isSetWalkingclassSubject()) {
      java.util.List<java.lang.Integer> __this__walkingclassSubject = new java.util.ArrayList<java.lang.Integer>(other.walkingclassSubject);
      this.walkingclassSubject = __this__walkingclassSubject;
    }
  }

  public StageOneResultOfClassStrategy deepCopy() {
    return new StageOneResultOfClassStrategy(this);
  }

  @Override
  public void clear() {
    this.walkingclassCombinationSolution = null;
    this.walkingclassCombinationSelection = null;
    this.walkingclassCombinationStudentAverageNumner = null;
    this.walkingclassCombinationClassNumber = null;
    this.minClassNumber = null;
    this.walkingclassSubject = null;
  }

  public int getWalkingclassCombinationSolutionSize() {
    return (this.walkingclassCombinationSolution == null) ? 0 : this.walkingclassCombinationSolution.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.lang.Integer>>> getWalkingclassCombinationSolutionIterator() {
    return (this.walkingclassCombinationSolution == null) ? null : this.walkingclassCombinationSolution.iterator();
  }

  public void addToWalkingclassCombinationSolution(java.util.List<java.util.List<java.lang.Integer>> elem) {
    if (this.walkingclassCombinationSolution == null) {
      this.walkingclassCombinationSolution = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>();
    }
    this.walkingclassCombinationSolution.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.lang.Integer>>> getWalkingclassCombinationSolution() {
    return this.walkingclassCombinationSolution;
  }

  public StageOneResultOfClassStrategy setWalkingclassCombinationSolution(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> walkingclassCombinationSolution) {
    this.walkingclassCombinationSolution = walkingclassCombinationSolution;
    return this;
  }

  public void unsetWalkingclassCombinationSolution() {
    this.walkingclassCombinationSolution = null;
  }

  /** Returns true if field walkingclassCombinationSolution is set (has been assigned a value) and false otherwise */
  public boolean isSetWalkingclassCombinationSolution() {
    return this.walkingclassCombinationSolution != null;
  }

  public void setWalkingclassCombinationSolutionIsSet(boolean value) {
    if (!value) {
      this.walkingclassCombinationSolution = null;
    }
  }

  public int getWalkingclassCombinationSelectionSize() {
    return (this.walkingclassCombinationSelection == null) ? 0 : this.walkingclassCombinationSelection.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.lang.Integer>>> getWalkingclassCombinationSelectionIterator() {
    return (this.walkingclassCombinationSelection == null) ? null : this.walkingclassCombinationSelection.iterator();
  }

  public void addToWalkingclassCombinationSelection(java.util.List<java.util.List<java.lang.Integer>> elem) {
    if (this.walkingclassCombinationSelection == null) {
      this.walkingclassCombinationSelection = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>();
    }
    this.walkingclassCombinationSelection.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.lang.Integer>>> getWalkingclassCombinationSelection() {
    return this.walkingclassCombinationSelection;
  }

  public StageOneResultOfClassStrategy setWalkingclassCombinationSelection(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> walkingclassCombinationSelection) {
    this.walkingclassCombinationSelection = walkingclassCombinationSelection;
    return this;
  }

  public void unsetWalkingclassCombinationSelection() {
    this.walkingclassCombinationSelection = null;
  }

  /** Returns true if field walkingclassCombinationSelection is set (has been assigned a value) and false otherwise */
  public boolean isSetWalkingclassCombinationSelection() {
    return this.walkingclassCombinationSelection != null;
  }

  public void setWalkingclassCombinationSelectionIsSet(boolean value) {
    if (!value) {
      this.walkingclassCombinationSelection = null;
    }
  }

  public int getWalkingclassCombinationStudentAverageNumnerSize() {
    return (this.walkingclassCombinationStudentAverageNumner == null) ? 0 : this.walkingclassCombinationStudentAverageNumner.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Double>> getWalkingclassCombinationStudentAverageNumnerIterator() {
    return (this.walkingclassCombinationStudentAverageNumner == null) ? null : this.walkingclassCombinationStudentAverageNumner.iterator();
  }

  public void addToWalkingclassCombinationStudentAverageNumner(java.util.List<java.lang.Double> elem) {
    if (this.walkingclassCombinationStudentAverageNumner == null) {
      this.walkingclassCombinationStudentAverageNumner = new java.util.ArrayList<java.util.List<java.lang.Double>>();
    }
    this.walkingclassCombinationStudentAverageNumner.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Double>> getWalkingclassCombinationStudentAverageNumner() {
    return this.walkingclassCombinationStudentAverageNumner;
  }

  public StageOneResultOfClassStrategy setWalkingclassCombinationStudentAverageNumner(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Double>> walkingclassCombinationStudentAverageNumner) {
    this.walkingclassCombinationStudentAverageNumner = walkingclassCombinationStudentAverageNumner;
    return this;
  }

  public void unsetWalkingclassCombinationStudentAverageNumner() {
    this.walkingclassCombinationStudentAverageNumner = null;
  }

  /** Returns true if field walkingclassCombinationStudentAverageNumner is set (has been assigned a value) and false otherwise */
  public boolean isSetWalkingclassCombinationStudentAverageNumner() {
    return this.walkingclassCombinationStudentAverageNumner != null;
  }

  public void setWalkingclassCombinationStudentAverageNumnerIsSet(boolean value) {
    if (!value) {
      this.walkingclassCombinationStudentAverageNumner = null;
    }
  }

  public int getWalkingclassCombinationClassNumberSize() {
    return (this.walkingclassCombinationClassNumber == null) ? 0 : this.walkingclassCombinationClassNumber.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getWalkingclassCombinationClassNumberIterator() {
    return (this.walkingclassCombinationClassNumber == null) ? null : this.walkingclassCombinationClassNumber.iterator();
  }

  public void addToWalkingclassCombinationClassNumber(java.util.List<java.lang.Integer> elem) {
    if (this.walkingclassCombinationClassNumber == null) {
      this.walkingclassCombinationClassNumber = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.walkingclassCombinationClassNumber.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getWalkingclassCombinationClassNumber() {
    return this.walkingclassCombinationClassNumber;
  }

  public StageOneResultOfClassStrategy setWalkingclassCombinationClassNumber(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> walkingclassCombinationClassNumber) {
    this.walkingclassCombinationClassNumber = walkingclassCombinationClassNumber;
    return this;
  }

  public void unsetWalkingclassCombinationClassNumber() {
    this.walkingclassCombinationClassNumber = null;
  }

  /** Returns true if field walkingclassCombinationClassNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetWalkingclassCombinationClassNumber() {
    return this.walkingclassCombinationClassNumber != null;
  }

  public void setWalkingclassCombinationClassNumberIsSet(boolean value) {
    if (!value) {
      this.walkingclassCombinationClassNumber = null;
    }
  }

  public int getMinClassNumberSize() {
    return (this.minClassNumber == null) ? 0 : this.minClassNumber.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getMinClassNumberIterator() {
    return (this.minClassNumber == null) ? null : this.minClassNumber.iterator();
  }

  public void addToMinClassNumber(int elem) {
    if (this.minClassNumber == null) {
      this.minClassNumber = new java.util.ArrayList<java.lang.Integer>();
    }
    this.minClassNumber.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getMinClassNumber() {
    return this.minClassNumber;
  }

  public StageOneResultOfClassStrategy setMinClassNumber(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> minClassNumber) {
    this.minClassNumber = minClassNumber;
    return this;
  }

  public void unsetMinClassNumber() {
    this.minClassNumber = null;
  }

  /** Returns true if field minClassNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetMinClassNumber() {
    return this.minClassNumber != null;
  }

  public void setMinClassNumberIsSet(boolean value) {
    if (!value) {
      this.minClassNumber = null;
    }
  }

  public int getWalkingclassSubjectSize() {
    return (this.walkingclassSubject == null) ? 0 : this.walkingclassSubject.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getWalkingclassSubjectIterator() {
    return (this.walkingclassSubject == null) ? null : this.walkingclassSubject.iterator();
  }

  public void addToWalkingclassSubject(int elem) {
    if (this.walkingclassSubject == null) {
      this.walkingclassSubject = new java.util.ArrayList<java.lang.Integer>();
    }
    this.walkingclassSubject.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getWalkingclassSubject() {
    return this.walkingclassSubject;
  }

  public StageOneResultOfClassStrategy setWalkingclassSubject(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> walkingclassSubject) {
    this.walkingclassSubject = walkingclassSubject;
    return this;
  }

  public void unsetWalkingclassSubject() {
    this.walkingclassSubject = null;
  }

  /** Returns true if field walkingclassSubject is set (has been assigned a value) and false otherwise */
  public boolean isSetWalkingclassSubject() {
    return this.walkingclassSubject != null;
  }

  public void setWalkingclassSubjectIsSet(boolean value) {
    if (!value) {
      this.walkingclassSubject = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case WALKINGCLASS_COMBINATION_SOLUTION:
      if (value == null) {
        unsetWalkingclassCombinationSolution();
      } else {
        setWalkingclassCombinationSolution((java.util.List<java.util.List<java.util.List<java.lang.Integer>>>)value);
      }
      break;

    case WALKINGCLASS_COMBINATION_SELECTION:
      if (value == null) {
        unsetWalkingclassCombinationSelection();
      } else {
        setWalkingclassCombinationSelection((java.util.List<java.util.List<java.util.List<java.lang.Integer>>>)value);
      }
      break;

    case WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER:
      if (value == null) {
        unsetWalkingclassCombinationStudentAverageNumner();
      } else {
        setWalkingclassCombinationStudentAverageNumner((java.util.List<java.util.List<java.lang.Double>>)value);
      }
      break;

    case WALKINGCLASS_COMBINATION_CLASS_NUMBER:
      if (value == null) {
        unsetWalkingclassCombinationClassNumber();
      } else {
        setWalkingclassCombinationClassNumber((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case MIN_CLASS_NUMBER:
      if (value == null) {
        unsetMinClassNumber();
      } else {
        setMinClassNumber((java.util.List<java.lang.Integer>)value);
      }
      break;

    case WALKINGCLASS_SUBJECT:
      if (value == null) {
        unsetWalkingclassSubject();
      } else {
        setWalkingclassSubject((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case WALKINGCLASS_COMBINATION_SOLUTION:
      return getWalkingclassCombinationSolution();

    case WALKINGCLASS_COMBINATION_SELECTION:
      return getWalkingclassCombinationSelection();

    case WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER:
      return getWalkingclassCombinationStudentAverageNumner();

    case WALKINGCLASS_COMBINATION_CLASS_NUMBER:
      return getWalkingclassCombinationClassNumber();

    case MIN_CLASS_NUMBER:
      return getMinClassNumber();

    case WALKINGCLASS_SUBJECT:
      return getWalkingclassSubject();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case WALKINGCLASS_COMBINATION_SOLUTION:
      return isSetWalkingclassCombinationSolution();
    case WALKINGCLASS_COMBINATION_SELECTION:
      return isSetWalkingclassCombinationSelection();
    case WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER:
      return isSetWalkingclassCombinationStudentAverageNumner();
    case WALKINGCLASS_COMBINATION_CLASS_NUMBER:
      return isSetWalkingclassCombinationClassNumber();
    case MIN_CLASS_NUMBER:
      return isSetMinClassNumber();
    case WALKINGCLASS_SUBJECT:
      return isSetWalkingclassSubject();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StageOneResultOfClassStrategy)
      return this.equals((StageOneResultOfClassStrategy)that);
    return false;
  }

  public boolean equals(StageOneResultOfClassStrategy that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_walkingclassCombinationSolution = true && this.isSetWalkingclassCombinationSolution();
    boolean that_present_walkingclassCombinationSolution = true && that.isSetWalkingclassCombinationSolution();
    if (this_present_walkingclassCombinationSolution || that_present_walkingclassCombinationSolution) {
      if (!(this_present_walkingclassCombinationSolution && that_present_walkingclassCombinationSolution))
        return false;
      if (!this.walkingclassCombinationSolution.equals(that.walkingclassCombinationSolution))
        return false;
    }

    boolean this_present_walkingclassCombinationSelection = true && this.isSetWalkingclassCombinationSelection();
    boolean that_present_walkingclassCombinationSelection = true && that.isSetWalkingclassCombinationSelection();
    if (this_present_walkingclassCombinationSelection || that_present_walkingclassCombinationSelection) {
      if (!(this_present_walkingclassCombinationSelection && that_present_walkingclassCombinationSelection))
        return false;
      if (!this.walkingclassCombinationSelection.equals(that.walkingclassCombinationSelection))
        return false;
    }

    boolean this_present_walkingclassCombinationStudentAverageNumner = true && this.isSetWalkingclassCombinationStudentAverageNumner();
    boolean that_present_walkingclassCombinationStudentAverageNumner = true && that.isSetWalkingclassCombinationStudentAverageNumner();
    if (this_present_walkingclassCombinationStudentAverageNumner || that_present_walkingclassCombinationStudentAverageNumner) {
      if (!(this_present_walkingclassCombinationStudentAverageNumner && that_present_walkingclassCombinationStudentAverageNumner))
        return false;
      if (!this.walkingclassCombinationStudentAverageNumner.equals(that.walkingclassCombinationStudentAverageNumner))
        return false;
    }

    boolean this_present_walkingclassCombinationClassNumber = true && this.isSetWalkingclassCombinationClassNumber();
    boolean that_present_walkingclassCombinationClassNumber = true && that.isSetWalkingclassCombinationClassNumber();
    if (this_present_walkingclassCombinationClassNumber || that_present_walkingclassCombinationClassNumber) {
      if (!(this_present_walkingclassCombinationClassNumber && that_present_walkingclassCombinationClassNumber))
        return false;
      if (!this.walkingclassCombinationClassNumber.equals(that.walkingclassCombinationClassNumber))
        return false;
    }

    boolean this_present_minClassNumber = true && this.isSetMinClassNumber();
    boolean that_present_minClassNumber = true && that.isSetMinClassNumber();
    if (this_present_minClassNumber || that_present_minClassNumber) {
      if (!(this_present_minClassNumber && that_present_minClassNumber))
        return false;
      if (!this.minClassNumber.equals(that.minClassNumber))
        return false;
    }

    boolean this_present_walkingclassSubject = true && this.isSetWalkingclassSubject();
    boolean that_present_walkingclassSubject = true && that.isSetWalkingclassSubject();
    if (this_present_walkingclassSubject || that_present_walkingclassSubject) {
      if (!(this_present_walkingclassSubject && that_present_walkingclassSubject))
        return false;
      if (!this.walkingclassSubject.equals(that.walkingclassSubject))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetWalkingclassCombinationSolution()) ? 131071 : 524287);
    if (isSetWalkingclassCombinationSolution())
      hashCode = hashCode * 8191 + walkingclassCombinationSolution.hashCode();

    hashCode = hashCode * 8191 + ((isSetWalkingclassCombinationSelection()) ? 131071 : 524287);
    if (isSetWalkingclassCombinationSelection())
      hashCode = hashCode * 8191 + walkingclassCombinationSelection.hashCode();

    hashCode = hashCode * 8191 + ((isSetWalkingclassCombinationStudentAverageNumner()) ? 131071 : 524287);
    if (isSetWalkingclassCombinationStudentAverageNumner())
      hashCode = hashCode * 8191 + walkingclassCombinationStudentAverageNumner.hashCode();

    hashCode = hashCode * 8191 + ((isSetWalkingclassCombinationClassNumber()) ? 131071 : 524287);
    if (isSetWalkingclassCombinationClassNumber())
      hashCode = hashCode * 8191 + walkingclassCombinationClassNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinClassNumber()) ? 131071 : 524287);
    if (isSetMinClassNumber())
      hashCode = hashCode * 8191 + minClassNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetWalkingclassSubject()) ? 131071 : 524287);
    if (isSetWalkingclassSubject())
      hashCode = hashCode * 8191 + walkingclassSubject.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StageOneResultOfClassStrategy other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetWalkingclassCombinationSolution()).compareTo(other.isSetWalkingclassCombinationSolution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalkingclassCombinationSolution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walkingclassCombinationSolution, other.walkingclassCombinationSolution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWalkingclassCombinationSelection()).compareTo(other.isSetWalkingclassCombinationSelection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalkingclassCombinationSelection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walkingclassCombinationSelection, other.walkingclassCombinationSelection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWalkingclassCombinationStudentAverageNumner()).compareTo(other.isSetWalkingclassCombinationStudentAverageNumner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalkingclassCombinationStudentAverageNumner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walkingclassCombinationStudentAverageNumner, other.walkingclassCombinationStudentAverageNumner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWalkingclassCombinationClassNumber()).compareTo(other.isSetWalkingclassCombinationClassNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalkingclassCombinationClassNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walkingclassCombinationClassNumber, other.walkingclassCombinationClassNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinClassNumber()).compareTo(other.isSetMinClassNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinClassNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minClassNumber, other.minClassNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWalkingclassSubject()).compareTo(other.isSetWalkingclassSubject());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWalkingclassSubject()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.walkingclassSubject, other.walkingclassSubject);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StageOneResultOfClassStrategy(");
    boolean first = true;

    sb.append("walkingclassCombinationSolution:");
    if (this.walkingclassCombinationSolution == null) {
      sb.append("null");
    } else {
      sb.append(this.walkingclassCombinationSolution);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("walkingclassCombinationSelection:");
    if (this.walkingclassCombinationSelection == null) {
      sb.append("null");
    } else {
      sb.append(this.walkingclassCombinationSelection);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("walkingclassCombinationStudentAverageNumner:");
    if (this.walkingclassCombinationStudentAverageNumner == null) {
      sb.append("null");
    } else {
      sb.append(this.walkingclassCombinationStudentAverageNumner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("walkingclassCombinationClassNumber:");
    if (this.walkingclassCombinationClassNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.walkingclassCombinationClassNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("minClassNumber:");
    if (this.minClassNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.minClassNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("walkingclassSubject:");
    if (this.walkingclassSubject == null) {
      sb.append("null");
    } else {
      sb.append(this.walkingclassSubject);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageOneResultOfClassStrategyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageOneResultOfClassStrategyStandardScheme getScheme() {
      return new StageOneResultOfClassStrategyStandardScheme();
    }
  }

  private static class StageOneResultOfClassStrategyStandardScheme extends org.apache.thrift.scheme.StandardScheme<StageOneResultOfClassStrategy> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageOneResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WALKINGCLASS_COMBINATION_SOLUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.walkingclassCombinationSolution = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  {
                    org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                    _elem1 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list3.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem4;
                    for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                    {
                      {
                        org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                        _elem4 = new java.util.ArrayList<java.lang.Integer>(_list6.size);
                        int _elem7;
                        for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                        {
                          _elem7 = iprot.readI32();
                          _elem4.add(_elem7);
                        }
                        iprot.readListEnd();
                      }
                      _elem1.add(_elem4);
                    }
                    iprot.readListEnd();
                  }
                  struct.walkingclassCombinationSolution.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setWalkingclassCombinationSolutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WALKINGCLASS_COMBINATION_SELECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list9 = iprot.readListBegin();
                struct.walkingclassCombinationSelection = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list9.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem10;
                for (int _i11 = 0; _i11 < _list9.size; ++_i11)
                {
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _elem10 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list12.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem13;
                    for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                    {
                      {
                        org.apache.thrift.protocol.TList _list15 = iprot.readListBegin();
                        _elem13 = new java.util.ArrayList<java.lang.Integer>(_list15.size);
                        int _elem16;
                        for (int _i17 = 0; _i17 < _list15.size; ++_i17)
                        {
                          _elem16 = iprot.readI32();
                          _elem13.add(_elem16);
                        }
                        iprot.readListEnd();
                      }
                      _elem10.add(_elem13);
                    }
                    iprot.readListEnd();
                  }
                  struct.walkingclassCombinationSelection.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setWalkingclassCombinationSelectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.walkingclassCombinationStudentAverageNumner = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list18.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  {
                    org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                    _elem19 = new java.util.ArrayList<java.lang.Double>(_list21.size);
                    double _elem22;
                    for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                    {
                      _elem22 = iprot.readDouble();
                      _elem19.add(_elem22);
                    }
                    iprot.readListEnd();
                  }
                  struct.walkingclassCombinationStudentAverageNumner.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setWalkingclassCombinationStudentAverageNumnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WALKINGCLASS_COMBINATION_CLASS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.walkingclassCombinationClassNumber = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list24.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  {
                    org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                    _elem25 = new java.util.ArrayList<java.lang.Integer>(_list27.size);
                    int _elem28;
                    for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                    {
                      _elem28 = iprot.readI32();
                      _elem25.add(_elem28);
                    }
                    iprot.readListEnd();
                  }
                  struct.walkingclassCombinationClassNumber.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setWalkingclassCombinationClassNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN_CLASS_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.minClassNumber = new java.util.ArrayList<java.lang.Integer>(_list30.size);
                int _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readI32();
                  struct.minClassNumber.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setMinClassNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WALKINGCLASS_SUBJECT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.walkingclassSubject = new java.util.ArrayList<java.lang.Integer>(_list33.size);
                int _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readI32();
                  struct.walkingclassSubject.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setWalkingclassSubjectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageOneResultOfClassStrategy struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.walkingclassCombinationSolution != null) {
        oprot.writeFieldBegin(WALKINGCLASS_COMBINATION_SOLUTION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.walkingclassCombinationSolution.size()));
          for (java.util.List<java.util.List<java.lang.Integer>> _iter36 : struct.walkingclassCombinationSolution)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter36.size()));
              for (java.util.List<java.lang.Integer> _iter37 : _iter36)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter37.size()));
                  for (int _iter38 : _iter37)
                  {
                    oprot.writeI32(_iter38);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.walkingclassCombinationSelection != null) {
        oprot.writeFieldBegin(WALKINGCLASS_COMBINATION_SELECTION_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.walkingclassCombinationSelection.size()));
          for (java.util.List<java.util.List<java.lang.Integer>> _iter39 : struct.walkingclassCombinationSelection)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter39.size()));
              for (java.util.List<java.lang.Integer> _iter40 : _iter39)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter40.size()));
                  for (int _iter41 : _iter40)
                  {
                    oprot.writeI32(_iter41);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.walkingclassCombinationStudentAverageNumner != null) {
        oprot.writeFieldBegin(WALKINGCLASS_COMBINATION_STUDENT_AVERAGE_NUMNER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.walkingclassCombinationStudentAverageNumner.size()));
          for (java.util.List<java.lang.Double> _iter42 : struct.walkingclassCombinationStudentAverageNumner)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter42.size()));
              for (double _iter43 : _iter42)
              {
                oprot.writeDouble(_iter43);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.walkingclassCombinationClassNumber != null) {
        oprot.writeFieldBegin(WALKINGCLASS_COMBINATION_CLASS_NUMBER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.walkingclassCombinationClassNumber.size()));
          for (java.util.List<java.lang.Integer> _iter44 : struct.walkingclassCombinationClassNumber)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter44.size()));
              for (int _iter45 : _iter44)
              {
                oprot.writeI32(_iter45);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.minClassNumber != null) {
        oprot.writeFieldBegin(MIN_CLASS_NUMBER_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.minClassNumber.size()));
          for (int _iter46 : struct.minClassNumber)
          {
            oprot.writeI32(_iter46);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.walkingclassSubject != null) {
        oprot.writeFieldBegin(WALKINGCLASS_SUBJECT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.walkingclassSubject.size()));
          for (int _iter47 : struct.walkingclassSubject)
          {
            oprot.writeI32(_iter47);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageOneResultOfClassStrategyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageOneResultOfClassStrategyTupleScheme getScheme() {
      return new StageOneResultOfClassStrategyTupleScheme();
    }
  }

  private static class StageOneResultOfClassStrategyTupleScheme extends org.apache.thrift.scheme.TupleScheme<StageOneResultOfClassStrategy> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageOneResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetWalkingclassCombinationSolution()) {
        optionals.set(0);
      }
      if (struct.isSetWalkingclassCombinationSelection()) {
        optionals.set(1);
      }
      if (struct.isSetWalkingclassCombinationStudentAverageNumner()) {
        optionals.set(2);
      }
      if (struct.isSetWalkingclassCombinationClassNumber()) {
        optionals.set(3);
      }
      if (struct.isSetMinClassNumber()) {
        optionals.set(4);
      }
      if (struct.isSetWalkingclassSubject()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetWalkingclassCombinationSolution()) {
        {
          oprot.writeI32(struct.walkingclassCombinationSolution.size());
          for (java.util.List<java.util.List<java.lang.Integer>> _iter48 : struct.walkingclassCombinationSolution)
          {
            {
              oprot.writeI32(_iter48.size());
              for (java.util.List<java.lang.Integer> _iter49 : _iter48)
              {
                {
                  oprot.writeI32(_iter49.size());
                  for (int _iter50 : _iter49)
                  {
                    oprot.writeI32(_iter50);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetWalkingclassCombinationSelection()) {
        {
          oprot.writeI32(struct.walkingclassCombinationSelection.size());
          for (java.util.List<java.util.List<java.lang.Integer>> _iter51 : struct.walkingclassCombinationSelection)
          {
            {
              oprot.writeI32(_iter51.size());
              for (java.util.List<java.lang.Integer> _iter52 : _iter51)
              {
                {
                  oprot.writeI32(_iter52.size());
                  for (int _iter53 : _iter52)
                  {
                    oprot.writeI32(_iter53);
                  }
                }
              }
            }
          }
        }
      }
      if (struct.isSetWalkingclassCombinationStudentAverageNumner()) {
        {
          oprot.writeI32(struct.walkingclassCombinationStudentAverageNumner.size());
          for (java.util.List<java.lang.Double> _iter54 : struct.walkingclassCombinationStudentAverageNumner)
          {
            {
              oprot.writeI32(_iter54.size());
              for (double _iter55 : _iter54)
              {
                oprot.writeDouble(_iter55);
              }
            }
          }
        }
      }
      if (struct.isSetWalkingclassCombinationClassNumber()) {
        {
          oprot.writeI32(struct.walkingclassCombinationClassNumber.size());
          for (java.util.List<java.lang.Integer> _iter56 : struct.walkingclassCombinationClassNumber)
          {
            {
              oprot.writeI32(_iter56.size());
              for (int _iter57 : _iter56)
              {
                oprot.writeI32(_iter57);
              }
            }
          }
        }
      }
      if (struct.isSetMinClassNumber()) {
        {
          oprot.writeI32(struct.minClassNumber.size());
          for (int _iter58 : struct.minClassNumber)
          {
            oprot.writeI32(_iter58);
          }
        }
      }
      if (struct.isSetWalkingclassSubject()) {
        {
          oprot.writeI32(struct.walkingclassSubject.size());
          for (int _iter59 : struct.walkingclassSubject)
          {
            oprot.writeI32(_iter59);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageOneResultOfClassStrategy struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.walkingclassCombinationSolution = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list60.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            {
              org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem61 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list63.size);
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem64;
              for (int _i65 = 0; _i65 < _list63.size; ++_i65)
              {
                {
                  org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _elem64 = new java.util.ArrayList<java.lang.Integer>(_list66.size);
                  int _elem67;
                  for (int _i68 = 0; _i68 < _list66.size; ++_i68)
                  {
                    _elem67 = iprot.readI32();
                    _elem64.add(_elem67);
                  }
                }
                _elem61.add(_elem64);
              }
            }
            struct.walkingclassCombinationSolution.add(_elem61);
          }
        }
        struct.setWalkingclassCombinationSolutionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.walkingclassCombinationSelection = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list69.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            {
              org.apache.thrift.protocol.TList _list72 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem70 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list72.size);
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem73;
              for (int _i74 = 0; _i74 < _list72.size; ++_i74)
              {
                {
                  org.apache.thrift.protocol.TList _list75 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _elem73 = new java.util.ArrayList<java.lang.Integer>(_list75.size);
                  int _elem76;
                  for (int _i77 = 0; _i77 < _list75.size; ++_i77)
                  {
                    _elem76 = iprot.readI32();
                    _elem73.add(_elem76);
                  }
                }
                _elem70.add(_elem73);
              }
            }
            struct.walkingclassCombinationSelection.add(_elem70);
          }
        }
        struct.setWalkingclassCombinationSelectionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.walkingclassCombinationStudentAverageNumner = new java.util.ArrayList<java.util.List<java.lang.Double>>(_list78.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Double> _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            {
              org.apache.thrift.protocol.TList _list81 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _elem79 = new java.util.ArrayList<java.lang.Double>(_list81.size);
              double _elem82;
              for (int _i83 = 0; _i83 < _list81.size; ++_i83)
              {
                _elem82 = iprot.readDouble();
                _elem79.add(_elem82);
              }
            }
            struct.walkingclassCombinationStudentAverageNumner.add(_elem79);
          }
        }
        struct.setWalkingclassCombinationStudentAverageNumnerIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list84 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.walkingclassCombinationClassNumber = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list84.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem85;
          for (int _i86 = 0; _i86 < _list84.size; ++_i86)
          {
            {
              org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem85 = new java.util.ArrayList<java.lang.Integer>(_list87.size);
              int _elem88;
              for (int _i89 = 0; _i89 < _list87.size; ++_i89)
              {
                _elem88 = iprot.readI32();
                _elem85.add(_elem88);
              }
            }
            struct.walkingclassCombinationClassNumber.add(_elem85);
          }
        }
        struct.setWalkingclassCombinationClassNumberIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list90 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.minClassNumber = new java.util.ArrayList<java.lang.Integer>(_list90.size);
          int _elem91;
          for (int _i92 = 0; _i92 < _list90.size; ++_i92)
          {
            _elem91 = iprot.readI32();
            struct.minClassNumber.add(_elem91);
          }
        }
        struct.setMinClassNumberIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.walkingclassSubject = new java.util.ArrayList<java.lang.Integer>(_list93.size);
          int _elem94;
          for (int _i95 = 0; _i95 < _list93.size; ++_i95)
          {
            _elem94 = iprot.readI32();
            struct.walkingclassSubject.add(_elem94);
          }
        }
        struct.setWalkingclassSubjectIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

