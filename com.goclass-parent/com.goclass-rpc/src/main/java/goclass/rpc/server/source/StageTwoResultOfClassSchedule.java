/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package goclass.rpc.server.source;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-11-07")
public class StageTwoResultOfClassSchedule implements org.apache.thrift.TBase<StageTwoResultOfClassSchedule, StageTwoResultOfClassSchedule._Fields>, java.io.Serializable, Cloneable, Comparable<StageTwoResultOfClassSchedule> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StageTwoResultOfClassSchedule");

  private static final org.apache.thrift.protocol.TField SESSION_CLASS_SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionClassSchedule", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DAY_ADMINCLASS_CLASS_SCHEDULE_FIELD_DESC = new org.apache.thrift.protocol.TField("dayAdminclassClassSchedule", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StageTwoResultOfClassScheduleStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StageTwoResultOfClassScheduleTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> sessionClassSchedule; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> dayAdminclassClassSchedule; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SESSION_CLASS_SCHEDULE((short)1, "sessionClassSchedule"),
    DAY_ADMINCLASS_CLASS_SCHEDULE((short)2, "dayAdminclassClassSchedule");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SESSION_CLASS_SCHEDULE
          return SESSION_CLASS_SCHEDULE;
        case 2: // DAY_ADMINCLASS_CLASS_SCHEDULE
          return DAY_ADMINCLASS_CLASS_SCHEDULE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SESSION_CLASS_SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("sessionClassSchedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)))));
    tmpMap.put(_Fields.DAY_ADMINCLASS_CLASS_SCHEDULE, new org.apache.thrift.meta_data.FieldMetaData("dayAdminclassClassSchedule", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StageTwoResultOfClassSchedule.class, metaDataMap);
  }

  public StageTwoResultOfClassSchedule() {
  }

  public StageTwoResultOfClassSchedule(
    java.util.List<java.util.List<java.lang.Integer>> sessionClassSchedule,
    java.util.List<java.util.List<java.util.List<java.lang.Integer>>> dayAdminclassClassSchedule)
  {
    this();
    this.sessionClassSchedule = sessionClassSchedule;
    this.dayAdminclassClassSchedule = dayAdminclassClassSchedule;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StageTwoResultOfClassSchedule(StageTwoResultOfClassSchedule other) {
    if (other.isSetSessionClassSchedule()) {
      java.util.List<java.util.List<java.lang.Integer>> __this__sessionClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other.sessionClassSchedule.size());
      for (java.util.List<java.lang.Integer> other_element : other.sessionClassSchedule) {
        java.util.List<java.lang.Integer> __this__sessionClassSchedule_copy = new java.util.ArrayList<java.lang.Integer>(other_element);
        __this__sessionClassSchedule.add(__this__sessionClassSchedule_copy);
      }
      this.sessionClassSchedule = __this__sessionClassSchedule;
    }
    if (other.isSetDayAdminclassClassSchedule()) {
      java.util.List<java.util.List<java.util.List<java.lang.Integer>>> __this__dayAdminclassClassSchedule = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(other.dayAdminclassClassSchedule.size());
      for (java.util.List<java.util.List<java.lang.Integer>> other_element : other.dayAdminclassClassSchedule) {
        java.util.List<java.util.List<java.lang.Integer>> __this__dayAdminclassClassSchedule_copy = new java.util.ArrayList<java.util.List<java.lang.Integer>>(other_element.size());
        for (java.util.List<java.lang.Integer> other_element_element : other_element) {
          java.util.List<java.lang.Integer> __this__dayAdminclassClassSchedule_copy_copy = new java.util.ArrayList<java.lang.Integer>(other_element_element);
          __this__dayAdminclassClassSchedule_copy.add(__this__dayAdminclassClassSchedule_copy_copy);
        }
        __this__dayAdminclassClassSchedule.add(__this__dayAdminclassClassSchedule_copy);
      }
      this.dayAdminclassClassSchedule = __this__dayAdminclassClassSchedule;
    }
  }

  public StageTwoResultOfClassSchedule deepCopy() {
    return new StageTwoResultOfClassSchedule(this);
  }

  @Override
  public void clear() {
    this.sessionClassSchedule = null;
    this.dayAdminclassClassSchedule = null;
  }

  public int getSessionClassScheduleSize() {
    return (this.sessionClassSchedule == null) ? 0 : this.sessionClassSchedule.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.lang.Integer>> getSessionClassScheduleIterator() {
    return (this.sessionClassSchedule == null) ? null : this.sessionClassSchedule.iterator();
  }

  public void addToSessionClassSchedule(java.util.List<java.lang.Integer> elem) {
    if (this.sessionClassSchedule == null) {
      this.sessionClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>();
    }
    this.sessionClassSchedule.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.lang.Integer>> getSessionClassSchedule() {
    return this.sessionClassSchedule;
  }

  public StageTwoResultOfClassSchedule setSessionClassSchedule(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> sessionClassSchedule) {
    this.sessionClassSchedule = sessionClassSchedule;
    return this;
  }

  public void unsetSessionClassSchedule() {
    this.sessionClassSchedule = null;
  }

  /** Returns true if field sessionClassSchedule is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionClassSchedule() {
    return this.sessionClassSchedule != null;
  }

  public void setSessionClassScheduleIsSet(boolean value) {
    if (!value) {
      this.sessionClassSchedule = null;
    }
  }

  public int getDayAdminclassClassScheduleSize() {
    return (this.dayAdminclassClassSchedule == null) ? 0 : this.dayAdminclassClassSchedule.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.util.List<java.util.List<java.lang.Integer>>> getDayAdminclassClassScheduleIterator() {
    return (this.dayAdminclassClassSchedule == null) ? null : this.dayAdminclassClassSchedule.iterator();
  }

  public void addToDayAdminclassClassSchedule(java.util.List<java.util.List<java.lang.Integer>> elem) {
    if (this.dayAdminclassClassSchedule == null) {
      this.dayAdminclassClassSchedule = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>();
    }
    this.dayAdminclassClassSchedule.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.util.List<java.util.List<java.lang.Integer>>> getDayAdminclassClassSchedule() {
    return this.dayAdminclassClassSchedule;
  }

  public StageTwoResultOfClassSchedule setDayAdminclassClassSchedule(@org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.util.List<java.lang.Integer>>> dayAdminclassClassSchedule) {
    this.dayAdminclassClassSchedule = dayAdminclassClassSchedule;
    return this;
  }

  public void unsetDayAdminclassClassSchedule() {
    this.dayAdminclassClassSchedule = null;
  }

  /** Returns true if field dayAdminclassClassSchedule is set (has been assigned a value) and false otherwise */
  public boolean isSetDayAdminclassClassSchedule() {
    return this.dayAdminclassClassSchedule != null;
  }

  public void setDayAdminclassClassScheduleIsSet(boolean value) {
    if (!value) {
      this.dayAdminclassClassSchedule = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SESSION_CLASS_SCHEDULE:
      if (value == null) {
        unsetSessionClassSchedule();
      } else {
        setSessionClassSchedule((java.util.List<java.util.List<java.lang.Integer>>)value);
      }
      break;

    case DAY_ADMINCLASS_CLASS_SCHEDULE:
      if (value == null) {
        unsetDayAdminclassClassSchedule();
      } else {
        setDayAdminclassClassSchedule((java.util.List<java.util.List<java.util.List<java.lang.Integer>>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SESSION_CLASS_SCHEDULE:
      return getSessionClassSchedule();

    case DAY_ADMINCLASS_CLASS_SCHEDULE:
      return getDayAdminclassClassSchedule();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SESSION_CLASS_SCHEDULE:
      return isSetSessionClassSchedule();
    case DAY_ADMINCLASS_CLASS_SCHEDULE:
      return isSetDayAdminclassClassSchedule();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StageTwoResultOfClassSchedule)
      return this.equals((StageTwoResultOfClassSchedule)that);
    return false;
  }

  public boolean equals(StageTwoResultOfClassSchedule that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sessionClassSchedule = true && this.isSetSessionClassSchedule();
    boolean that_present_sessionClassSchedule = true && that.isSetSessionClassSchedule();
    if (this_present_sessionClassSchedule || that_present_sessionClassSchedule) {
      if (!(this_present_sessionClassSchedule && that_present_sessionClassSchedule))
        return false;
      if (!this.sessionClassSchedule.equals(that.sessionClassSchedule))
        return false;
    }

    boolean this_present_dayAdminclassClassSchedule = true && this.isSetDayAdminclassClassSchedule();
    boolean that_present_dayAdminclassClassSchedule = true && that.isSetDayAdminclassClassSchedule();
    if (this_present_dayAdminclassClassSchedule || that_present_dayAdminclassClassSchedule) {
      if (!(this_present_dayAdminclassClassSchedule && that_present_dayAdminclassClassSchedule))
        return false;
      if (!this.dayAdminclassClassSchedule.equals(that.dayAdminclassClassSchedule))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSessionClassSchedule()) ? 131071 : 524287);
    if (isSetSessionClassSchedule())
      hashCode = hashCode * 8191 + sessionClassSchedule.hashCode();

    hashCode = hashCode * 8191 + ((isSetDayAdminclassClassSchedule()) ? 131071 : 524287);
    if (isSetDayAdminclassClassSchedule())
      hashCode = hashCode * 8191 + dayAdminclassClassSchedule.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StageTwoResultOfClassSchedule other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSessionClassSchedule()).compareTo(other.isSetSessionClassSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionClassSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionClassSchedule, other.sessionClassSchedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDayAdminclassClassSchedule()).compareTo(other.isSetDayAdminclassClassSchedule());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayAdminclassClassSchedule()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayAdminclassClassSchedule, other.dayAdminclassClassSchedule);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StageTwoResultOfClassSchedule(");
    boolean first = true;

    sb.append("sessionClassSchedule:");
    if (this.sessionClassSchedule == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionClassSchedule);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dayAdminclassClassSchedule:");
    if (this.dayAdminclassClassSchedule == null) {
      sb.append("null");
    } else {
      sb.append(this.dayAdminclassClassSchedule);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StageTwoResultOfClassScheduleStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageTwoResultOfClassScheduleStandardScheme getScheme() {
      return new StageTwoResultOfClassScheduleStandardScheme();
    }
  }

  private static class StageTwoResultOfClassScheduleStandardScheme extends org.apache.thrift.scheme.StandardScheme<StageTwoResultOfClassSchedule> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StageTwoResultOfClassSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SESSION_CLASS_SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list830 = iprot.readListBegin();
                struct.sessionClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list830.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem831;
                for (int _i832 = 0; _i832 < _list830.size; ++_i832)
                {
                  {
                    org.apache.thrift.protocol.TList _list833 = iprot.readListBegin();
                    _elem831 = new java.util.ArrayList<java.lang.Integer>(_list833.size);
                    int _elem834;
                    for (int _i835 = 0; _i835 < _list833.size; ++_i835)
                    {
                      _elem834 = iprot.readI32();
                      _elem831.add(_elem834);
                    }
                    iprot.readListEnd();
                  }
                  struct.sessionClassSchedule.add(_elem831);
                }
                iprot.readListEnd();
              }
              struct.setSessionClassScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DAY_ADMINCLASS_CLASS_SCHEDULE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list836 = iprot.readListBegin();
                struct.dayAdminclassClassSchedule = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list836.size);
                @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem837;
                for (int _i838 = 0; _i838 < _list836.size; ++_i838)
                {
                  {
                    org.apache.thrift.protocol.TList _list839 = iprot.readListBegin();
                    _elem837 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list839.size);
                    @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem840;
                    for (int _i841 = 0; _i841 < _list839.size; ++_i841)
                    {
                      {
                        org.apache.thrift.protocol.TList _list842 = iprot.readListBegin();
                        _elem840 = new java.util.ArrayList<java.lang.Integer>(_list842.size);
                        int _elem843;
                        for (int _i844 = 0; _i844 < _list842.size; ++_i844)
                        {
                          _elem843 = iprot.readI32();
                          _elem840.add(_elem843);
                        }
                        iprot.readListEnd();
                      }
                      _elem837.add(_elem840);
                    }
                    iprot.readListEnd();
                  }
                  struct.dayAdminclassClassSchedule.add(_elem837);
                }
                iprot.readListEnd();
              }
              struct.setDayAdminclassClassScheduleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StageTwoResultOfClassSchedule struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sessionClassSchedule != null) {
        oprot.writeFieldBegin(SESSION_CLASS_SCHEDULE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.sessionClassSchedule.size()));
          for (java.util.List<java.lang.Integer> _iter845 : struct.sessionClassSchedule)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter845.size()));
              for (int _iter846 : _iter845)
              {
                oprot.writeI32(_iter846);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dayAdminclassClassSchedule != null) {
        oprot.writeFieldBegin(DAY_ADMINCLASS_CLASS_SCHEDULE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.dayAdminclassClassSchedule.size()));
          for (java.util.List<java.util.List<java.lang.Integer>> _iter847 : struct.dayAdminclassClassSchedule)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, _iter847.size()));
              for (java.util.List<java.lang.Integer> _iter848 : _iter847)
              {
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, _iter848.size()));
                  for (int _iter849 : _iter848)
                  {
                    oprot.writeI32(_iter849);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StageTwoResultOfClassScheduleTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StageTwoResultOfClassScheduleTupleScheme getScheme() {
      return new StageTwoResultOfClassScheduleTupleScheme();
    }
  }

  private static class StageTwoResultOfClassScheduleTupleScheme extends org.apache.thrift.scheme.TupleScheme<StageTwoResultOfClassSchedule> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StageTwoResultOfClassSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSessionClassSchedule()) {
        optionals.set(0);
      }
      if (struct.isSetDayAdminclassClassSchedule()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSessionClassSchedule()) {
        {
          oprot.writeI32(struct.sessionClassSchedule.size());
          for (java.util.List<java.lang.Integer> _iter850 : struct.sessionClassSchedule)
          {
            {
              oprot.writeI32(_iter850.size());
              for (int _iter851 : _iter850)
              {
                oprot.writeI32(_iter851);
              }
            }
          }
        }
      }
      if (struct.isSetDayAdminclassClassSchedule()) {
        {
          oprot.writeI32(struct.dayAdminclassClassSchedule.size());
          for (java.util.List<java.util.List<java.lang.Integer>> _iter852 : struct.dayAdminclassClassSchedule)
          {
            {
              oprot.writeI32(_iter852.size());
              for (java.util.List<java.lang.Integer> _iter853 : _iter852)
              {
                {
                  oprot.writeI32(_iter853.size());
                  for (int _iter854 : _iter853)
                  {
                    oprot.writeI32(_iter854);
                  }
                }
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StageTwoResultOfClassSchedule struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list855 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.sessionClassSchedule = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list855.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem856;
          for (int _i857 = 0; _i857 < _list855.size; ++_i857)
          {
            {
              org.apache.thrift.protocol.TList _list858 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
              _elem856 = new java.util.ArrayList<java.lang.Integer>(_list858.size);
              int _elem859;
              for (int _i860 = 0; _i860 < _list858.size; ++_i860)
              {
                _elem859 = iprot.readI32();
                _elem856.add(_elem859);
              }
            }
            struct.sessionClassSchedule.add(_elem856);
          }
        }
        struct.setSessionClassScheduleIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list861 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.dayAdminclassClassSchedule = new java.util.ArrayList<java.util.List<java.util.List<java.lang.Integer>>>(_list861.size);
          @org.apache.thrift.annotation.Nullable java.util.List<java.util.List<java.lang.Integer>> _elem862;
          for (int _i863 = 0; _i863 < _list861.size; ++_i863)
          {
            {
              org.apache.thrift.protocol.TList _list864 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
              _elem862 = new java.util.ArrayList<java.util.List<java.lang.Integer>>(_list864.size);
              @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> _elem865;
              for (int _i866 = 0; _i866 < _list864.size; ++_i866)
              {
                {
                  org.apache.thrift.protocol.TList _list867 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
                  _elem865 = new java.util.ArrayList<java.lang.Integer>(_list867.size);
                  int _elem868;
                  for (int _i869 = 0; _i869 < _list867.size; ++_i869)
                  {
                    _elem868 = iprot.readI32();
                    _elem865.add(_elem868);
                  }
                }
                _elem862.add(_elem865);
              }
            }
            struct.dayAdminclassClassSchedule.add(_elem862);
          }
        }
        struct.setDayAdminclassClassScheduleIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

